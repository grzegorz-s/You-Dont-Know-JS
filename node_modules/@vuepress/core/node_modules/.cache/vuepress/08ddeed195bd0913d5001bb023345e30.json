{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/up_and_going/foreword.md?vue&type=template&id=1afa8788&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/up_and_going/foreword.md","mtime":1572780326901},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ5b3UtZG9uLXQta25vdy1qcy11cC1nb2luZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjeW91LWRvbi10LWtub3ctanMtdXAtZ29pbmciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBZb3UgRG9uJ3QgS25vdyBKUzogVXAgJiBHb2luZyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImZvcmV3b3JkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmb3Jld29yZCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRm9yZXdvcmQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiV2hhdCB3YXMgdGhlIGxhc3QgbmV3IHRoaW5nIHlvdSBsZWFybmVkPyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGVyaGFwcyBpdCB3YXMgYSBmb3JlaWduIGxhbmd1YWdlLCBsaWtlIEl0YWxpYW4gb3IgR2VybWFuLiBPciBtYXliZSBpdCB3YXMgYSBncmFwaGljcyBlZGl0b3IsIGxpa2UgUGhvdG9zaG9wLiBPciBhIGNvb2tpbmcgdGVjaG5pcXVlIG9yIHdvb2R3b3JraW5nIG9yIGFuIGV4ZXJjaXNlIHJvdXRpbmUuIEkgd2FudCB5b3UgdG8gcmVtZW1iZXIgdGhhdCBmZWVsaW5nIHdoZW4geW91IGZpbmFsbHkgZ290IGl0OiB0aGUgbGlnaHRidWxiIG1vbWVudC4gV2hlbiB0aGluZ3Mgd2VudCBmcm9tIGJsdXJyeSB0byBjcnlzdGFsIGNsZWFyLCBhcyB5b3UgbWFzdGVyZWQgdGhlIHRhYmxlIHNhdyBvciB1bmRlcnN0b29kIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gbWFzY3VsaW5lIGFuZCBmZW1pbmluZSBub3VucyBpbiBGcmVuY2guIEhvdyBkaWQgaXQgZmVlbD8gUHJldHR5IGFtYXppbmcsIHJpZ2h0PyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vdyBJIHdhbnQgeW91IHRvIHRyYXZlbCBiYWNrIGEgbGl0dGxlIGJpdCBmdXJ0aGVyIGluIHlvdXIgbWVtb3J5IHRvIHJpZ2h0IGJlZm9yZSB5b3UgbGVhcm5lZCB5b3VyIG5ldyBza2lsbC4gSG93IGRpZCAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ0aGF0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZlZWw/IFByb2JhYmx5IHNsaWdodGx5IGludGltaWRhdGluZyBhbmQgbWF5YmUgYSBsaXR0bGUgYml0IGZydXN0cmF0aW5nLCByaWdodD8gQXQgb25lIHBvaW50LCB3ZSBhbGwgZGlkIG5vdCBrbm93IHRoZSB0aGluZ3MgdGhhdCB3ZSBrbm93IG5vdyBhbmQgdGhhdOKAmXMgdG90YWxseSBPSzsgd2UgYWxsIHN0YXJ0IHNvbWV3aGVyZS4gTGVhcm5pbmcgbmV3IG1hdGVyaWFsIGlzIGFuIGV4Y2l0aW5nIGFkdmVudHVyZSwgZXNwZWNpYWxseSBpZiB5b3UgYXJlIGxvb2tpbmcgdG8gbGVhcm4gdGhlIHN1YmplY3QgZWZmaWNpZW50bHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSB0ZWFjaCBhIGxvdCBvZiBiZWdpbm5lciBjb2RpbmcgY2xhc3Nlcy4gVGhlIHN0dWRlbnRzIHdobyB0YWtlIG15IGNsYXNzZXMgaGF2ZSBvZnRlbiB0cmllZCB0ZWFjaGluZyB0aGVtc2VsdmVzIHN1YmplY3RzIGxpa2UgSFRNTCBvciBKYXZhU2NyaXB0IGJ5IHJlYWRpbmcgYmxvZyBwb3N0cyBvciBjb3B5aW5nIGFuZCBwYXN0aW5nIGNvZGUsIGJ1dCB0aGV5IGhhdmVu4oCZdCBiZWVuIGFibGUgdG8gdHJ1bHkgbWFzdGVyIHRoZSBtYXRlcmlhbCB0aGF0IHdpbGwgYWxsb3cgdGhlbSB0byBjb2RlIHRoZWlyIGRlc2lyZWQgb3V0Y29tZS4gQW5kIGJlY2F1c2UgdGhleSBkb27igJl0IHRydWx5IGdyYXNwIHRoZSBpbnMgYW5kIG91dHMgb2YgY2VydGFpbiBjb2RpbmcgdG9waWNzLCB0aGV5IGNhbuKAmXQgd3JpdGUgcG93ZXJmdWwgY29kZSBvciBkZWJ1ZyB0aGVpciBvd24gd29yaywgYXMgdGhleSBkb27igJl0IHJlYWxseSB1bmRlcnN0YW5kIHdoYXQgaXMgaGFwcGVuaW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgYWx3YXlzIGJlbGlldmUgaW4gdGVhY2hpbmcgbXkgY2xhc3NlcyB0aGUgcHJvcGVyIHdheSwgbWVhbmluZyBJIHRlYWNoIHdlYiBzdGFuZGFyZHMsIHNlbWFudGljIG1hcmt1cCwgd2VsbC1jb21tZW50ZWQgY29kZSwgYW5kIG90aGVyIGJlc3QgcHJhY3RpY2VzLiBJIGNvdmVyIHRoZSBzdWJqZWN0IGluIGEgdGhvcm91Z2ggbWFubmVyIHRvIGV4cGxhaW4gdGhlIGhvd3MgYW5kIHdoeXMsIHdpdGhvdXQganVzdCB0b3NzaW5nIG91dCBjb2RlIHRvIGNvcHkgYW5kIHBhc3RlLiBXaGVuIHlvdSBzdHJpdmUgdG8gY29tcHJlaGVuZCB5b3VyIGNvZGUsIHlvdSBjcmVhdGUgYmV0dGVyIHdvcmsgYW5kIGJlY29tZSBiZXR0ZXIgYXQgd2hhdCB5b3UgZG8uIFRoZSBjb2RlIGlzbuKAmXQganVzdCB5b3VyICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImpvYiIpXSksCiAgICAgICAgX3ZtLl92KCIgYW55bW9yZSwgaXTigJlzIHlvdXIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY3JhZnQiKV0pLAogICAgICAgIF92bS5fdigiLiBUaGlzIGlzIHdoeSBJIGxvdmUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiVXAgJiBHb2luZyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gS3lsZSB0YWtlcyB1cyBvbiBhIGRlZXAgZGl2ZSB0aHJvdWdoIHN5bnRheCBhbmQgdGVybWlub2xvZ3kgdG8gZ2l2ZSBhIGdyZWF0IGludHJvZHVjdGlvbiB0byBKYXZhU2NyaXB0IHdpdGhvdXQgY3V0dGluZyBjb3JuZXJzLiBUaGlzIGJvb2sgZG9lc27igJl0IHNraW0gb3ZlciB0aGUgc3VyZmFjZSwgYnV0IHJlYWxseSBhbGxvd3MgdXMgdG8gZ2VudWluZWx5IHVuZGVyc3RhbmQgdGhlIGNvbmNlcHRzIHdlIHdpbGwgYmUgd3JpdGluZy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWNhdXNlIGl04oCZcyBub3QgZW5vdWdoIHRvIGJlIGFibGUgdG8gZHVwbGljYXRlIGpRdWVyeSBzbmlwcGV0cyBpbnRvIHlvdXIgd2Vic2l0ZSwgdGhlIHNhbWUgd2F5IGl04oCZcyBub3QgZW5vdWdoIHRvIGxlYXJuIGhvdyB0byBvcGVuLCBjbG9zZSwgYW5kIHNhdmUgYSBkb2N1bWVudCBpbiBQaG90b3Nob3AuIFN1cmUsIG9uY2UgSSBsZWFybiBhIGZldyBiYXNpY3MgYWJvdXQgdGhlIHByb2dyYW0gSSBjb3VsZCBjcmVhdGUgYW5kIHNoYXJlIGEgZGVzaWduIEkgbWFkZS4gQnV0IHdpdGhvdXQgbGVnaXRpbWF0ZWx5IGtub3dpbmcgdGhlIHRvb2xzIGFuZCB3aGF0IGlzIGJlaGluZCB0aGVtLCBob3cgY2FuIEkgZGVmaW5lIGEgZ3JpZCwgb3IgY3JhZnQgYSBsZWdpYmxlIHR5cGUgc3lzdGVtLCBvciBvcHRpbWl6ZSBncmFwaGljcyBmb3Igd2ViIHVzZS4gVGhlIHNhbWUgZ29lcyBmb3IgSmF2YVNjcmlwdC4gV2l0aG91dCBrbm93aW5nIGhvdyBsb29wcyB3b3JrLCBvciBob3cgdG8gZGVmaW5lIHZhcmlhYmxlcywgb3Igd2hhdCBzY29wZSBpcywgd2Ugd29u4oCZdCBiZSB3cml0aW5nIHRoZSBiZXN0IGNvZGUgd2UgY2FuLiBXZSBkb27igJl0IHdhbnQgdG8gc2V0dGxlIGZvciBhbnl0aGluZyBsZXNzIC0tIHRoaXMgaXMsIGFmdGVyIGFsbCwgb3VyIGNyYWZ0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBtb3JlIHlvdSBhcmUgZXhwb3NlZCB0byBKYXZhU2NyaXB0LCB0aGUgY2xlYXJlciBpdCBiZWNvbWVzLiBXb3JkcyBsaWtlIGNsb3N1cmVzLCBvYmplY3RzLCBhbmQgbWV0aG9kcyBtaWdodCBzZWVtIG91dCBvZiByZWFjaCB0byB5b3Ugbm93LCBidXQgdGhpcyBib29rIHdpbGwgaGVscCB0aG9zZSB0ZXJtcyBjb21lIGludG8gY2xhcml0eS4gSSB3YW50IHlvdSB0byBrZWVwIHRob3NlIHR3byBmZWVsaW5ncyBvZiBiZWZvcmUgYW5kIGFmdGVyIHlvdSBsZWFybiBzb21ldGhpbmcgaW4gbWluZCBhcyB5b3UgYmVnaW4gdGhpcyBib29rLiBJdCBtaWdodCBzZWVtIGRhdW50aW5nLCBidXQgeW914oCZdmUgcGlja2VkIHVwIHRoaXMgYm9vayBiZWNhdXNlIHlvdSBhcmUgc3RhcnRpbmcgYW4gYXdlc29tZSBqb3VybmV5IHRvIGhvbmUgeW91ciBrbm93bGVkZ2UuICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIlVwICYgR29pbmciKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgdGhlIHN0YXJ0IG9mIG91ciBwYXRoIHRvIHVuZGVyc3RhbmRpbmcgcHJvZ3JhbW1pbmcuIEVuam95IHRoZSBsaWdodGJ1bGIgbW9tZW50cyEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSmVubiBMdWthcyIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vamVubmx1a2FzLmNvbS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImplbm5sdWthcy5jb20iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90d2l0dGVyLmNvbS9qZW5ubHVrYXMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkBqZW5ubHVrYXMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5Gcm9udC1lbmQgY29uc3VsdGFudCIpCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}