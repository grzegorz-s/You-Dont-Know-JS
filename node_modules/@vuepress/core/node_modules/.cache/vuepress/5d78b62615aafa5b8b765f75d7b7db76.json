{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/async_and_performance/foreword.md?vue&type=template&id=7bae7a57&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/async_and_performance/foreword.md","mtime":1572780326873},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ5b3UtZG9uLXQta25vdy1qcy1hc3luYy1wZXJmb3JtYW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjeW91LWRvbi10LWtub3ctanMtYXN5bmMtcGVyZm9ybWFuY2UiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBZb3UgRG9uJ3QgS25vdyBKUzogQXN5bmMgJiBQZXJmb3JtYW5jZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImZvcmV3b3JkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmb3Jld29yZCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRm9yZXdvcmQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdmVyIHRoZSB5ZWFycywgbXkgZW1wbG95ZXIgaGFzIHRydXN0ZWQgbWUgZW5vdWdoIHRvIGNvbmR1Y3QgaW50ZXJ2aWV3cy4gSWYgd2UncmUgbG9va2luZyBmb3Igc29tZW9uZSB3aXRoIHNraWxscyBpbiBKYXZhU2NyaXB0LCBteSBmaXJzdCBsaW5lIG9mIHF1ZXN0aW9uaW5n4oCmIGFjdHVhbGx5IHRoYXQncyBub3QgdHJ1ZSwgSSBmaXJzdCBjaGVjayBpZiB0aGUgY2FuZGlkYXRlIG5lZWRzIHRoZSBiYXRocm9vbSBhbmQvb3IgYSBkcmluaywgYmVjYXVzZSBjb21mb3J0IGlzIGltcG9ydGFudCwgYnV0IG9uY2UgSSdtIHBhc3QgdGhlIGJpdCBhYm91dCB0aGUgY2FuZGlkYXRlJ3MgZmx1aWQgaW4vb3V0LXRha2UsIEkgc2V0IGFib3V0IGRldGVybWluaW5nIGlmIHRoZSBjYW5kaWRhdGUga25vd3MgSmF2YVNjcmlwdCwgb3IganVzdCBqUXVlcnkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm90IHRoYXQgdGhlcmUncyBhbnl0aGluZyB3cm9uZyB3aXRoIGpRdWVyeS4gSXQgbGV0cyB5b3UgZG8gYSBsb3Qgd2l0aG91dCByZWFsbHkga25vd2luZyBKYXZhU2NyaXB0LCBhbmQgdGhhdCdzIGEgZmVhdHVyZSBub3QgYSBidWcuIEJ1dCBpZiB0aGUgam9iIGNhbGxzIGZvciBhZHZhbmNlZCBza2lsbHMgaW4gSmF2YVNjcmlwdCBwZXJmb3JtYW5jZSBhbmQgbWFpbnRhaW5hYmlsaXR5LCB5b3UgbmVlZCBzb21lb25lIHdobyBrbm93cyBob3cgbGlicmFyaWVzIHN1Y2ggYXMgalF1ZXJ5IGFyZSBwdXQgdG9nZXRoZXIuIFlvdSBuZWVkIHRvIGJlIGFibGUgdG8gaGFybmVzcyB0aGUgY29yZSBvZiBKYXZhU2NyaXB0IHRoZSBzYW1lIHdheSB0aGV5IGRvLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIEkgd2FudCB0byBnZXQgYSBwaWN0dXJlIG9mIHNvbWVvbmUncyBjb3JlIEphdmFTY3JpcHQgc2tpbGwsIEknbSBtb3N0IGludGVyZXN0ZWQgaW4gd2hhdCB0aGV5IG1ha2Ugb2YgY2xvc3VyZXMgKHlvdSd2ZSByZWFkIHRoYXQgYm9vayBvZiB0aGlzIHNlcmllcyBhbHJlYWR5LCByaWdodD8pIGFuZCBob3cgdG8gZ2V0IHRoZSBtb3N0IG91dCBvZiBhc3luY2hyb25pY2l0eSwgd2hpY2ggYnJpbmdzIHVzIHRvIHRoaXMgYm9vay4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3Igc3RhcnRlcnMsIHlvdSdsbCBiZSB0YWtlbiB0aHJvdWdoIGNhbGxiYWNrcywgdGhlIGJyZWFkIGFuZCBidXR0ZXIgb2YgYXN5bmNocm9ub3VzIHByb2dyYW1taW5nLiBPZiBjb3Vyc2UsIGJyZWFkIGFuZCBidXR0ZXIgZG9lcyBub3QgbWFrZSBmb3IgYSBwYXJ0aWN1bGFybHkgc2F0aXNmeWluZyBtZWFsLCBidXQgdGhlIG5leHQgY291cnNlIGlzIGZ1bGwgb2YgdGFzdHkgdGFzdHkgcHJvbWlzZXMhIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91IGRvbid0IGtub3cgcHJvbWlzZXMsIG5vdyBpcyB0aGUgdGltZSB0byBsZWFybi4gUHJvbWlzZXMgYXJlIG5vdyB0aGUgb2ZmaWNpYWwgd2F5IHRvIHByb3ZpZGUgYXN5bmMgcmV0dXJuIHZhbHVlcyBpbiBib3RoIEphdmFTY3JpcHQgYW5kIHRoZSBET00uIEFsbCBmdXR1cmUgYXN5bmMgRE9NIEFQSXMgd2lsbCB1c2UgdGhlbSwgbWFueSBhbHJlYWR5IGRvLCBzbyBiZSBwcmVwYXJlZCEgQXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgUHJvbWlzZXMgaGF2ZSBzaGlwcGVkIGluIG1vc3QgbWFqb3IgYnJvd3NlcnMsIHdpdGggSUUgc2hpcHBpbmcgc29vbi4gT25jZSB5b3UndmUgZmluaXNoZWQgdGhhdCwgSSBob3BlIHlvdSBsZWZ0IHJvb20gZm9yIHRoZSBuZXh0IGNvdXJzZSwgR2VuZXJhdG9ycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJHZW5lcmF0b3JzIHNudWNrIHRoZWlyIHdheSBpbnRvIHN0YWJsZSB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIEZpcmVmb3ggd2l0aG91dCB0b28gbXVjaCBwb21wIGFuZCBjZXJlbW9ueSwgYmVjYXVzZSwgZnJhbmtseSwgdGhleSdyZSBtb3JlIGNvbXBsaWNhdGVkIHRoYW4gdGhleSBhcmUgaW50ZXJlc3RpbmcuIE9yLCB0aGF0J3Mgd2hhdCBJIHRob3VnaHQgdW50aWwgSSBzYXcgdGhlbSBjb21iaW5lZCB3aXRoIHByb21pc2VzLiBUaGVyZSwgdGhleSBiZWNvbWUgYW4gaW1wb3J0YW50IHRvb2wgaW4gcmVhZGFiaWxpdHkgYW5kIG1haW50ZW5hbmNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBkZXNzZXJ0LCB3ZWxsLCBJIHdvbid0IHNwb2lsIHRoZSBzdXJwcmlzZSwgYnV0IHByZXBhcmUgdG8gZ2F6ZSBpbnRvIHRoZSBmdXR1cmUgb2YgSmF2YVNjcmlwdCEgRmVhdHVyZXMgdGhhdCBnaXZlIHlvdSBtb3JlIGFuZCBtb3JlIGNvbnRyb2wgb3ZlciBjb25jdXJyZW5jeSBhbmQgYXN5bmNocm9uaWNpdHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2VsbCwgSSB3b24ndCBibG9jayB5b3VyIGVuam95bWVudCBvZiB0aGUgYm9vayBhbnkgbG9uZ2VyLCBvbiB3aXRoIHRoZSBzaG93ISBJZiB5b3UndmUgYWxyZWFkeSByZWFkIHBhcnQgb2YgdGhlIGJvb2sgYmVmb3JlIHJlYWRpbmcgdGhpcyBGb3Jld29yZCwgZ2l2ZSB5b3Vyc2VsZiAxMCBhc3luY2hyb25vdXMgcG9pbnRzISBZb3UgZGVzZXJ2ZSB0aGVtISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJKYWtlIEFyY2hpYmFsZCIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vamFrZWFyY2hpYmFsZC5jb20iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImpha2VhcmNoaWJhbGQuY29tIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly90d2l0dGVyLmNvbS9qYWZmYXRoZWNha2UiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkBqYWZmYXRoZWNha2UiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5EZXZlbG9wZXIgQWR2b2NhdGUgYXQgR29vZ2xlIENocm9tZSIpCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}