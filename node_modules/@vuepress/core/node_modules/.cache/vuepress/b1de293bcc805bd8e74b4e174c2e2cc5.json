{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/scope_and_closures/ch2.md?vue&type=template&id=309ff644&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/scope_and_closures/ch2.md","mtime":1572780326882},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ5b3UtZG9uLXQta25vdy1qcy1zY29wZS1jbG9zdXJlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjeW91LWRvbi10LWtub3ctanMtc2NvcGUtY2xvc3VyZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBZb3UgRG9uJ3QgS25vdyBKUzogU2NvcGUgJiBDbG9zdXJlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgxIiwgeyBhdHRyczogeyBpZDogImNoYXB0ZXItMi1sZXhpY2FsLXNjb3BlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaGFwdGVyLTItbGV4aWNhbC1zY29wZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoYXB0ZXIgMjogTGV4aWNhbCBTY29wZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0luIENoYXB0ZXIgMSwgd2UgZGVmaW5lZCAic2NvcGUiIGFzIHRoZSBzZXQgb2YgcnVsZXMgdGhhdCBnb3Zlcm4gaG93IHRoZSAnCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJFbmdpbmUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgY2FuIGxvb2sgdXAgYSB2YXJpYWJsZSBieSBpdHMgaWRlbnRpZmllciBuYW1lIGFuZCBmaW5kIGl0LCBlaXRoZXIgaW4gdGhlIGN1cnJlbnQgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiU2NvcGUiKV0pLAogICAgICAgIF92bS5fdigiLCBvciBpbiBhbnkgb2YgdGhlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIk5lc3RlZCBTY29wZXMiKV0pLAogICAgICAgIF92bS5fdigiIGl0J3MgY29udGFpbmVkIHdpdGhpbi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgdHdvIHByZWRvbWluYW50IG1vZGVscyBmb3IgaG93IHNjb3BlIHdvcmtzLiBUaGUgZmlyc3Qgb2YgdGhlc2UgaXMgYnkgZmFyIHRoZSBtb3N0IGNvbW1vbiwgdXNlZCBieSB0aGUgdmFzdCBtYWpvcml0eSBvZiBwcm9ncmFtbWluZyBsYW5ndWFnZXMuIEl0J3MgY2FsbGVkICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMZXhpY2FsIFNjb3BlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBhbmQgd2Ugd2lsbCBleGFtaW5lIGl0IGluLWRlcHRoLiBUaGUgb3RoZXIgbW9kZWwsIHdoaWNoIGlzIHN0aWxsIHVzZWQgYnkgc29tZSBsYW5ndWFnZXMgKHN1Y2ggYXMgQmFzaCBzY3JpcHRpbmcsIHNvbWUgbW9kZXMgaW4gUGVybCwgZXRjLikgaXMgY2FsbGVkICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEeW5hbWljIFNjb3BlIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEeW5hbWljIFNjb3BlIGlzIGNvdmVyZWQgaW4gQXBwZW5kaXggQS4gSSBtZW50aW9uIGl0IGhlcmUgb25seSB0byBwcm92aWRlIGEgY29udHJhc3Qgd2l0aCBMZXhpY2FsIFNjb3BlLCB3aGljaCBpcyB0aGUgc2NvcGUgbW9kZWwgdGhhdCBKYXZhU2NyaXB0IGVtcGxveXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAibGV4LXRpbWUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2xleC10aW1lIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMZXgtdGltZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzIHdlIGRpc2N1c3NlZCBpbiBDaGFwdGVyIDEsIHRoZSBmaXJzdCB0cmFkaXRpb25hbCBwaGFzZSBvZiBhIHN0YW5kYXJkIGxhbmd1YWdlIGNvbXBpbGVyIGlzIGNhbGxlZCBsZXhpbmcgKGFrYSwgdG9rZW5pemluZykuIElmIHlvdSByZWNhbGwsIHRoZSBsZXhpbmcgcHJvY2VzcyBleGFtaW5lcyBhIHN0cmluZyBvZiBzb3VyY2UgY29kZSBjaGFyYWN0ZXJzIGFuZCBhc3NpZ25zIHNlbWFudGljIG1lYW5pbmcgdG8gdGhlIHRva2VucyBhcyBhIHJlc3VsdCBvZiBzb21lIHN0YXRlZnVsIHBhcnNpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgdGhpcyBjb25jZXB0IHdoaWNoIHByb3ZpZGVzIHRoZSBmb3VuZGF0aW9uIHRvIHVuZGVyc3RhbmQgd2hhdCBsZXhpY2FsIHNjb3BlIGlzIGFuZCB3aGVyZSB0aGUgbmFtZSBjb21lcyBmcm9tLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGRlZmluZSBpdCBzb21ld2hhdCBjaXJjdWxhcmx5LCBsZXhpY2FsIHNjb3BlIGlzIHNjb3BlIHRoYXQgaXMgZGVmaW5lZCBhdCBsZXhpbmcgdGltZS4gSW4gb3RoZXIgd29yZHMsIGxleGljYWwgc2NvcGUgaXMgYmFzZWQgb24gd2hlcmUgdmFyaWFibGVzIGFuZCBibG9ja3Mgb2Ygc2NvcGUgYXJlIGF1dGhvcmVkLCBieSB5b3UsIGF0IHdyaXRlIHRpbWUsIGFuZCB0aHVzIGlzIChtb3N0bHkpIHNldCBpbiBzdG9uZSBieSB0aGUgdGltZSB0aGUgbGV4ZXIgcHJvY2Vzc2VzIHlvdXIgY29kZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBXZSB3aWxsIHNlZSBpbiBhIGxpdHRsZSBiaXQgdGhlcmUgYXJlIHNvbWUgd2F5cyB0byBjaGVhdCBsZXhpY2FsIHNjb3BlLCB0aGVyZWJ5IG1vZGlmeWluZyBpdCBhZnRlciB0aGUgbGV4ZXIgaGFzIHBhc3NlZCBieSwgYnV0IHRoZXNlIGFyZSBmcm93bmVkIHVwb24uIEl0IGlzIGNvbnNpZGVyZWQgYmVzdCBwcmFjdGljZSB0byB0cmVhdCBsZXhpY2FsIHNjb3BlIGFzLCBpbiBmYWN0LCBsZXhpY2FsLW9ubHksIGFuZCB0aHVzIGVudGlyZWx5IGF1dGhvci10aW1lIGluIG5hdHVyZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTGV0J3MgY29uc2lkZXIgdGhpcyBibG9jayBvZiBjb2RlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWpzIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWpzIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGtleXdvcmQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZnVuY3Rpb24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZm9vIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHBhcmFtZXRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJhIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cblx0IiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ2YXIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgYiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGEgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuXHQiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImJhciIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwYXJhbWV0ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiYyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigieyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuXHRcdGNvbnNvbGUiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigibG9nIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBhIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBiIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBjICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdCIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuXHQiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJiYXIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiYiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIqIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZm9vIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi8vIDIgNCAxMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgdGhyZWUgbmVzdGVkIHNjb3BlcyBpbmhlcmVudCBpbiB0aGlzIGNvZGUgZXhhbXBsZS4gSXQgbWF5IGJlIGhlbHBmdWwgdG8gdGhpbmsgYWJvdXQgdGhlc2Ugc2NvcGVzIGFzIGJ1YmJsZXMgaW5zaWRlIG9mIGVhY2ggb3RoZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICJmaWcyLnBuZyIsIHdpZHRoOiAiNTAwIiB9IH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJ1YmJsZSAxIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGVuY29tcGFzc2VzIHRoZSBnbG9iYWwgc2NvcGUsIGFuZCBoYXMganVzdCBvbmUgaWRlbnRpZmllciBpbiBpdDogIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb28iKV0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJ1YmJsZSAyIildKSwKICAgICAgICBfdm0uX3YoIiBlbmNvbXBhc3NlcyB0aGUgc2NvcGUgb2YgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb28iKV0pLAogICAgICAgIF92bS5fdigiLCB3aGljaCBpbmNsdWRlcyB0aGUgdGhyZWUgaWRlbnRpZmllcnM6ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmFyIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJCdWJibGUgMyIpXSksCiAgICAgICAgX3ZtLl92KCIgZW5jb21wYXNzZXMgdGhlIHNjb3BlIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmFyIildKSwKICAgICAgICBfdm0uX3YoIiwgYW5kIGl0IGluY2x1ZGVzIGp1c3Qgb25lIGlkZW50aWZpZXI6ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYyIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2NvcGUgYnViYmxlcyBhcmUgZGVmaW5lZCBieSB3aGVyZSB0aGUgYmxvY2tzIG9mIHNjb3BlIGFyZSB3cml0dGVuLCB3aGljaCBvbmUgaXMgbmVzdGVkIGluc2lkZSB0aGUgb3RoZXIsIGV0Yy4gSW4gdGhlIG5leHQgY2hhcHRlciwgd2UnbGwgZGlzY3VzcyBkaWZmZXJlbnQgdW5pdHMgb2Ygc2NvcGUsIGJ1dCBmb3Igbm93LCBsZXQncyBqdXN0IGFzc3VtZSB0aGF0IGVhY2ggZnVuY3Rpb24gY3JlYXRlcyBhIG5ldyBidWJibGUgb2Ygc2NvcGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBidWJibGUgZm9yICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmFyIildKSwKICAgICAgICBfdm0uX3YoIiBpcyBlbnRpcmVseSBjb250YWluZWQgd2l0aGluIHRoZSBidWJibGUgZm9yICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBiZWNhdXNlIChhbmQgb25seSBiZWNhdXNlKSB0aGF0J3Mgd2hlcmUgd2UgY2hvc2UgdG8gZGVmaW5lIHRoZSBmdW5jdGlvbiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJhciIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm90aWNlIHRoYXQgdGhlc2UgbmVzdGVkIGJ1YmJsZXMgYXJlIHN0cmljdGx5IG5lc3RlZC4gV2UncmUgbm90IHRhbGtpbmcgYWJvdXQgVmVubiBkaWFncmFtcyB3aGVyZSB0aGUgYnViYmxlcyBjYW4gY3Jvc3MgYm91bmRhcmllcy4gSW4gb3RoZXIgd29yZHMsIG5vIGJ1YmJsZSBmb3Igc29tZSBmdW5jdGlvbiBjYW4gc2ltdWx0YW5lb3VzbHkgZXhpc3QgKHBhcnRpYWxseSkgaW5zaWRlIHR3byBvdGhlciBvdXRlciBzY29wZSBidWJibGVzLCBqdXN0IGFzIG5vIGZ1bmN0aW9uIGNhbiBwYXJ0aWFsbHkgYmUgaW5zaWRlIGVhY2ggb2YgdHdvIHBhcmVudCBmdW5jdGlvbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibG9vay11cHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2xvb2stdXBzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMb29rLXVwcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzdHJ1Y3R1cmUgYW5kIHJlbGF0aXZlIHBsYWNlbWVudCBvZiB0aGVzZSBzY29wZSBidWJibGVzIGZ1bGx5IGV4cGxhaW5zIHRvIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJFbmdpbmUiKV0pLAogICAgICAgIF92bS5fdigiIGFsbCB0aGUgcGxhY2VzIGl0IG5lZWRzIHRvIGxvb2sgdG8gZmluZCBhbiBpZGVudGlmaWVyLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiB0aGUgYWJvdmUgY29kZSBzbmlwcGV0LCB0aGUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRW5naW5lIildKSwKICAgICAgICBfdm0uX3YoIiBleGVjdXRlcyB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25zb2xlLmxvZyguLikiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc3RhdGVtZW50IGFuZCBnb2VzIGxvb2tpbmcgZm9yIHRoZSB0aHJlZSByZWZlcmVuY2VkIHZhcmlhYmxlcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImEiKV0pLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImIiKV0pLAogICAgICAgIF92bS5fdigiLCBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBJdCBmaXJzdCBzdGFydHMgd2l0aCB0aGUgaW5uZXJtb3N0IHNjb3BlIGJ1YmJsZSwgdGhlIHNjb3BlIG9mIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJhciguLikiKV0pLAogICAgICAgIF92bS5fdigiIGZ1bmN0aW9uLiBJdCB3b24ndCBmaW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0aGVyZSwgc28gaXQgZ29lcyB1cCBvbmUgbGV2ZWwsIG91dCB0byB0aGUgbmV4dCBuZWFyZXN0IHNjb3BlIGJ1YmJsZSwgdGhlIHNjb3BlIG9mICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIuIEl0IGZpbmRzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KCIgdGhlcmUsIGFuZCBzbyBpdCB1c2VzIHRoYXQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhIildKSwKICAgICAgICBfdm0uX3YoIi4gU2FtZSB0aGluZyBmb3IgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICBfdm0uX3YoIi4gQnV0ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYyIpXSksCiAgICAgICAgX3ZtLl92KCIsIGl0IGRvZXMgZmluZCBpbnNpZGUgb2YgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiYXIoLi4pIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSGFkIHRoZXJlIGJlZW4gYSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImMiKV0pLAogICAgICAgIF92bS5fdigiIGJvdGggaW5zaWRlIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmFyKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGluc2lkZSBvZiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZvbyguLikiKV0pLAogICAgICAgIF92bS5fdigiLCB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25zb2xlLmxvZyguLikiKV0pLAogICAgICAgIF92bS5fdigiIHN0YXRlbWVudCB3b3VsZCBoYXZlIGZvdW5kIGFuZCB1c2VkIHRoZSBvbmUgaW4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiYXIoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiwgbmV2ZXIgZ2V0dGluZyB0byB0aGUgb25lIGluICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJTY29wZSBsb29rLXVwIHN0b3BzIG9uY2UgaXQgZmluZHMgdGhlIGZpcnN0IG1hdGNoIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnLiBUaGUgc2FtZSBpZGVudGlmaWVyIG5hbWUgY2FuIGJlIHNwZWNpZmllZCBhdCBtdWx0aXBsZSBsYXllcnMgb2YgbmVzdGVkIHNjb3BlLCB3aGljaCBpcyBjYWxsZWQgInNoYWRvd2luZyIgKHRoZSBpbm5lciBpZGVudGlmaWVyICJzaGFkb3dzIiB0aGUgb3V0ZXIgaWRlbnRpZmllcikuIFJlZ2FyZGxlc3Mgb2Ygc2hhZG93aW5nLCBzY29wZSBsb29rLXVwIGFsd2F5cyBzdGFydHMgYXQgdGhlIGlubmVybW9zdCBzY29wZSBiZWluZyBleGVjdXRlZCBhdCB0aGUgdGltZSwgYW5kIHdvcmtzIGl0cyB3YXkgb3V0d2FyZC91cHdhcmQgdW50aWwgdGhlIGZpcnN0IG1hdGNoLCBhbmQgc3RvcHMuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgR2xvYmFsIHZhcmlhYmxlcyBhcmUgYWxzbyBhdXRvbWF0aWNhbGx5IHByb3BlcnRpZXMgb2YgdGhlIGdsb2JhbCBvYmplY3QgKCIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2luZG93IildKSwKICAgICAgICBfdm0uX3YoIiBpbiBicm93c2VycywgZXRjLiksIHNvIGl0ICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImlzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBvc3NpYmxlIHRvIHJlZmVyZW5jZSBhIGdsb2JhbCB2YXJpYWJsZSBub3QgZGlyZWN0bHkgYnkgaXRzIGxleGljYWwgbmFtZSwgYnV0IGluc3RlYWQgaW5kaXJlY3RseSBhcyBhIHByb3BlcnR5IHJlZmVyZW5jZSBvZiB0aGUgZ2xvYmFsIG9iamVjdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtanMgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtanMiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigid2luZG93IiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoImFcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyB0ZWNobmlxdWUgZ2l2ZXMgYWNjZXNzIHRvIGEgZ2xvYmFsIHZhcmlhYmxlIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBiZSBpbmFjY2Vzc2libGUgZHVlIHRvIGl0IGJlaW5nIHNoYWRvd2VkLiBIb3dldmVyLCBub24tZ2xvYmFsIHNoYWRvd2VkIHZhcmlhYmxlcyBjYW5ub3QgYmUgYWNjZXNzZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk5vIG1hdHRlciAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ3aGVyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgYSBmdW5jdGlvbiBpcyBpbnZva2VkIGZyb20sIG9yIGV2ZW4gIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiaG93IildKSwKICAgICAgICBfdm0uX3YoIiBpdCBpcyBpbnZva2VkLCBpdHMgbGV4aWNhbCBzY29wZSBpcyAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigib25seSIpXSksCiAgICAgICAgX3ZtLl92KCIgZGVmaW5lZCBieSB3aGVyZSB0aGUgZnVuY3Rpb24gd2FzIGRlY2xhcmVkLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgbGV4aWNhbCBzY29wZSBsb29rLXVwIHByb2Nlc3MgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigib25seSIpXSksCiAgICAgICAgX3ZtLl92KCIgYXBwbGllcyB0byBmaXJzdC1jbGFzcyBpZGVudGlmaWVycywgc3VjaCBhcyB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICBfdm0uX3YoIiwgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYyIpXSksCiAgICAgICAgX3ZtLl92KCIuIElmIHlvdSBoYWQgYSByZWZlcmVuY2UgdG8gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb28uYmFyLmJheiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbiBhIHBpZWNlIG9mIGNvZGUsIHRoZSBsZXhpY2FsIHNjb3BlIGxvb2stdXAgd291bGQgYXBwbHkgdG8gZmluZGluZyB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb28iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaWRlbnRpZmllciwgYnV0IG9uY2UgaXQgbG9jYXRlcyB0aGF0IHZhcmlhYmxlLCBvYmplY3QgcHJvcGVydHktYWNjZXNzIHJ1bGVzIHRha2Ugb3ZlciB0byByZXNvbHZlIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJhciIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmF6IildKSwKICAgICAgICBfdm0uX3YoIiBwcm9wZXJ0aWVzLCByZXNwZWN0aXZlbHkuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY2hlYXRpbmctbGV4aWNhbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY2hlYXRpbmctbGV4aWNhbCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoZWF0aW5nIExleGljYWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdJZiBsZXhpY2FsIHNjb3BlIGlzIGRlZmluZWQgb25seSBieSB3aGVyZSBhIGZ1bmN0aW9uIGlzIGRlY2xhcmVkLCB3aGljaCBpcyBlbnRpcmVseSBhbiBhdXRob3ItdGltZSBkZWNpc2lvbiwgaG93IGNvdWxkIHRoZXJlIHBvc3NpYmx5IGJlIGEgd2F5IHRvICJtb2RpZnkiIChha2EsIGNoZWF0KSBsZXhpY2FsIHNjb3BlIGF0IHJ1bi10aW1lPycKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkphdmFTY3JpcHQgaGFzIHR3byBzdWNoIG1lY2hhbmlzbXMuIEJvdGggb2YgdGhlbSBhcmUgZXF1YWxseSBmcm93bmVkLXVwb24gaW4gdGhlIHdpZGVyIGNvbW11bml0eSBhcyBiYWQgcHJhY3RpY2VzIHRvIHVzZSBpbiB5b3VyIGNvZGUuIEJ1dCB0aGUgdHlwaWNhbCBhcmd1bWVudHMgYWdhaW5zdCB0aGVtIGFyZSBvZnRlbiBtaXNzaW5nIHRoZSBtb3N0IGltcG9ydGFudCBwb2ludDogIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiY2hlYXRpbmcgbGV4aWNhbCBzY29wZSBsZWFkcyB0byBwb29yZXIgcGVyZm9ybWFuY2UuIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWZvcmUgSSBleHBsYWluIHRoZSBwZXJmb3JtYW5jZSBpc3N1ZSwgdGhvdWdoLCBsZXQncyBsb29rIGF0IGhvdyB0aGVzZSB0d28gbWVjaGFuaXNtcyB3b3JrLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImV2YWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2V2YWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmdW5jdGlvbiBpbiBKYXZhU2NyaXB0IHRha2VzIGEgc3RyaW5nIGFzIGFuIGFyZ3VtZW50LCBhbmQgdHJlYXRzIHRoZSBjb250ZW50cyBvZiB0aGUgc3RyaW5nIGFzIGlmIGl0IGhhZCBhY3R1YWxseSBiZWVuIGF1dGhvcmVkIGNvZGUgYXQgdGhhdCBwb2ludCBpbiB0aGUgcHJvZ3JhbS4gSW4gb3RoZXIgd29yZHMsIHlvdSBjYW4gcHJvZ3JhbW1hdGljYWxseSBnZW5lcmF0ZSBjb2RlIGluc2lkZSBvZiB5b3VyIGF1dGhvcmVkIGNvZGUsIGFuZCBydW4gdGhlIGdlbmVyYXRlZCBjb2RlIGFzIGlmIGl0IGhhZCBiZWVuIHRoZXJlIGF0IGF1dGhvciB0aW1lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJFdmFsdWF0aW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbCguLikiKV0pLAogICAgICAgIF92bS5fdigiIChwdW4gaW50ZW5kZWQpIGluIHRoYXQgbGlnaHQsIGl0IHNob3VsZCBiZSBjbGVhciBob3cgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhbGxvd3MgeW91IHRvIG1vZGlmeSB0aGUgbGV4aWNhbCBzY29wZSBlbnZpcm9ubWVudCBieSBjaGVhdGluZyBhbmQgcHJldGVuZGluZyB0aGF0IGF1dGhvci10aW1lIChha2EsIGxleGljYWwpIGNvZGUgd2FzIHRoZXJlIGFsbCBhbG9uZy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiT24gc3Vic2VxdWVudCBsaW5lcyBvZiBjb2RlIGFmdGVyIGFuICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbCguLikiKV0pLAogICAgICAgIF92bS5fdigiIGhhcyBleGVjdXRlZCwgdGhlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkVuZ2luZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyB3aWxsIG5vdCAia25vdyIgb3IgImNhcmUiIHRoYXQgdGhlIHByZXZpb3VzIGNvZGUgaW4gcXVlc3Rpb24gd2FzIGR5bmFtaWNhbGx5IGludGVycHJldGVkIGFuZCB0aHVzIG1vZGlmaWVkIHRoZSBsZXhpY2FsIHNjb3BlIGVudmlyb25tZW50LiBUaGUgJwogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRW5naW5lIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdpbGwgc2ltcGx5IHBlcmZvcm0gaXRzIGxleGljYWwgc2NvcGUgbG9vay11cHMgYXMgaXQgYWx3YXlzIGRvZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY29kZToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1qcyBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS1qcyIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZvbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwYXJhbWV0ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3RyIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiwiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiIGEiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0IiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZXZhbCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgc3RyICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbW1lbnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLy8gY2hlYXRpbmchIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdGNvbnNvbGUiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigibG9nIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBhIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGtleXdvcmQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigidmFyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZm9vIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBzdHJpbmciIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdignInZhciBiID0gMzsiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi8vIDEgMyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHN0cmluZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJyJ2YXIgYiA9IDM7IicpXSksCiAgICAgICAgX3ZtLl92KCIgaXMgdHJlYXRlZCwgYXQgdGhlIHBvaW50IG9mIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNhbGwsIGFzIGNvZGUgdGhhdCB3YXMgdGhlcmUgYWxsIGFsb25nLiBCZWNhdXNlIHRoYXQgY29kZSBoYXBwZW5zIHRvIGRlY2xhcmUgYSBuZXcgdmFyaWFibGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICBfdm0uX3YoIiwgaXQgbW9kaWZpZXMgdGhlIGV4aXN0aW5nIGxleGljYWwgc2NvcGUgb2YgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmb28oLi4pIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBJbiBmYWN0LCBhcyBtZW50aW9uZWQgYWJvdmUsIHRoaXMgY29kZSBhY3R1YWxseSBjcmVhdGVzIHZhcmlhYmxlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYiIpXSksCiAgICAgICAgX3ZtLl92KCIgaW5zaWRlIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgdGhhdCBzaGFkb3dzIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImIiKV0pLAogICAgICAgIF92bS5fdigiIHRoYXQgd2FzIGRlY2xhcmVkIGluIHRoZSBvdXRlciAoZ2xvYmFsKSBzY29wZS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiV2hlbiB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25zb2xlLmxvZyguLikiKV0pLAogICAgICAgIF92bS5fdigiIGNhbGwgb2NjdXJzLCBpdCBmaW5kcyBib3RoICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYiIpXSksCiAgICAgICAgX3ZtLl92KCIgaW4gdGhlIHNjb3BlIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIsIGFuZCBuZXZlciBmaW5kcyB0aGUgb3V0ZXIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJiIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnLiBUaHVzLCB3ZSBwcmludCBvdXQgIjEgMyIgaW5zdGVhZCBvZiAiMSAyIiBhcyB3b3VsZCBoYXZlIG5vcm1hbGx5IGJlZW4gdGhlIGNhc2UuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSW4gdGhpcyBleGFtcGxlLCBmb3Igc2ltcGxpY2l0eSdzIHNha2UsIHRoZSBzdHJpbmcgb2YgXCJjb2RlXCIgd2UgcGFzcyBpbiB3YXMgYSBmaXhlZCBsaXRlcmFsLiBCdXQgaXQgY291bGQgZWFzaWx5IGhhdmUgYmVlbiBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgYnkgYWRkaW5nIGNoYXJhY3RlcnMgdG9nZXRoZXIgYmFzZWQgb24geW91ciBwcm9ncmFtJ3MgbG9naWMuICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbCguLikiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgdXN1YWxseSB1c2VkIHRvIGV4ZWN1dGUgZHluYW1pY2FsbHkgY3JlYXRlZCBjb2RlLCBhcyBkeW5hbWljYWxseSBldmFsdWF0aW5nIGVzc2VudGlhbGx5IHN0YXRpYyBjb2RlIGZyb20gYSBzdHJpbmcgbGl0ZXJhbCB3b3VsZCBwcm92aWRlIG5vIHJlYWwgYmVuZWZpdCB0byBqdXN0IGF1dGhvcmluZyB0aGUgY29kZSBkaXJlY3RseS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQnkgZGVmYXVsdCwgaWYgYSBzdHJpbmcgb2YgY29kZSB0aGF0ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbCguLikiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZXhlY3V0ZXMgY29udGFpbnMgb25lIG9yIG1vcmUgZGVjbGFyYXRpb25zIChlaXRoZXIgdmFyaWFibGVzIG9yIGZ1bmN0aW9ucyksIHRoaXMgYWN0aW9uIG1vZGlmaWVzIHRoZSBleGlzdGluZyBsZXhpY2FsIHNjb3BlIGluIHdoaWNoIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiByZXNpZGVzLiBUZWNobmljYWxseSwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyBjYW4gYmUgaW52b2tlZCAiaW5kaXJlY3RseSIsIHRocm91Z2ggdmFyaW91cyB0cmlja3MgKGJleW9uZCBvdXIgZGlzY3Vzc2lvbiBoZXJlKSwgd2hpY2ggY2F1c2VzIGl0IHRvIGluc3RlYWQgZXhlY3V0ZSBpbiB0aGUgY29udGV4dCBvZiB0aGUgZ2xvYmFsIHNjb3BlLCB0aHVzIG1vZGlmeWluZyBpdC4gQnV0IGluIGVpdGhlciBjYXNlLCAnCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiBjYW4gYXQgcnVudGltZSBtb2RpZnkgYW4gYXV0aG9yLXRpbWUgbGV4aWNhbCBzY29wZS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlOiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3aGVuIHVzZWQgaW4gYSBzdHJpY3QtbW9kZSBwcm9ncmFtIG9wZXJhdGVzIGluIGl0cyBvd24gbGV4aWNhbCBzY29wZSwgd2hpY2ggbWVhbnMgZGVjbGFyYXRpb25zIG1hZGUgaW5zaWRlIG9mIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoKSIpXSksCiAgICAgICAgX3ZtLl92KCIgZG8gbm90IGFjdHVhbGx5IG1vZGlmeSB0aGUgZW5jbG9zaW5nIHNjb3BlLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS1qcyBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS1qcyIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZvbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwYXJhbWV0ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigic3RyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gICAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBzdHJpbmciIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdignInVzZSBzdHJpY3QiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICAgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZXZhbCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgc3RyICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gICBjb25zb2xlIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImxvZyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgYSAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi8vIFJlZmVyZW5jZUVycm9yOiBhIGlzIG5vdCBkZWZpbmVkIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZvbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gc3RyaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoJyJ2YXIgYSA9IDIiJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIGFyZSBvdGhlciBmYWNpbGl0aWVzIGluIEphdmFTY3JpcHQgd2hpY2ggYW1vdW50IHRvIGEgdmVyeSBzaW1pbGFyIGVmZmVjdCB0byAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIi4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZXRUaW1lb3V0KC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2V0SW50ZXJ2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjYW4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdGFrZSBhIHN0cmluZyBmb3IgdGhlaXIgcmVzcGVjdGl2ZSBmaXJzdCBhcmd1bWVudCwgdGhlIGNvbnRlbnRzIG9mIHdoaWNoIGFyZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJ1YXRlZCBhcyB0aGUgY29kZSBvZiBhIGR5bmFtaWNhbGx5LWdlbmVyYXRlZCBmdW5jdGlvbi4gVGhpcyBpcyBvbGQsIGxlZ2FjeSBiZWhhdmlvciBhbmQgbG9uZy1zaW5jZSBkZXByZWNhdGVkLiBEb24ndCBkbyBpdCEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmV3IEZ1bmN0aW9uKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmdW5jdGlvbiBjb25zdHJ1Y3RvciBzaW1pbGFybHkgdGFrZXMgYSBzdHJpbmcgb2YgY29kZSBpbiBpdHMgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImxhc3QiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYXJndW1lbnQgdG8gdHVybiBpbnRvIGEgZHluYW1pY2FsbHktZ2VuZXJhdGVkIGZ1bmN0aW9uICh0aGUgZmlyc3QgYXJndW1lbnQocyksIGlmIGFueSwgYXJlIHRoZSBuYW1lZCBwYXJhbWV0ZXJzIGZvciB0aGUgbmV3IGZ1bmN0aW9uKS4gVGhpcyBmdW5jdGlvbi1jb25zdHJ1Y3RvciBzeW50YXggaXMgc2xpZ2h0bHkgc2FmZXIgdGhhbiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiwgYnV0IGl0IHNob3VsZCBzdGlsbCBiZSBhdm9pZGVkIGluIHlvdXIgY29kZS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgdXNlLWNhc2VzIGZvciBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGNvZGUgaW5zaWRlIHlvdXIgcHJvZ3JhbSBhcmUgaW5jcmVkaWJseSByYXJlLCBhcyB0aGUgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25zIGFyZSBhbG1vc3QgbmV2ZXIgd29ydGggdGhlIGNhcGFiaWxpdHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2l0aCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjd2l0aCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2l0aCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIG90aGVyIGZyb3duZWQtdXBvbiAoYW5kIG5vdyBkZXByZWNhdGVkISkgZmVhdHVyZSBpbiBKYXZhU2NyaXB0IHdoaWNoIGNoZWF0cyBsZXhpY2FsIHNjb3BlIGlzIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIGtleXdvcmQuIFRoZXJlIGFyZSBtdWx0aXBsZSB2YWxpZCB3YXlzIHRoYXQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGNhbiBiZSBleHBsYWluZWQsIGJ1dCBJIHdpbGwgY2hvb3NlIGhlcmUgdG8gZXhwbGFpbiBpdCBmcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBob3cgaXQgaW50ZXJhY3RzIHdpdGggYW5kIGFmZmVjdHMgbGV4aWNhbCBzY29wZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2l0aCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyB0eXBpY2FsbHkgZXhwbGFpbmVkIGFzIGEgc2hvcnQtaGFuZCBmb3IgbWFraW5nIG11bHRpcGxlIHByb3BlcnR5IHJlZmVyZW5jZXMgYWdhaW5zdCBhbiBvYmplY3QgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigid2l0aG91dCIpXSksCiAgICAgICAgX3ZtLl92KCIgcmVwZWF0aW5nIHRoZSBvYmplY3QgcmVmZXJlbmNlIGl0c2VsZiBlYWNoIHRpbWUuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkZvciBleGFtcGxlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWpzIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWpzIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGtleXdvcmQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigidmFyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIG9iaiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0YSIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjoiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIsIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdGIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuXHRjIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCcvLyBtb3JlICJ0ZWRpb3VzIiB0byByZXBlYXQgIm9iaiInKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbm9iaiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJhICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIj0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5vYmoiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiYiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxub2JqIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoImMgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCcvLyAiZWFzaWVyIiBzaG9ydC1oYW5kJykKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIndpdGgiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIm9iaiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigieyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuXHRhICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIj0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdGIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBudW1iZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0YyAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigifSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIb3dldmVyLCB0aGVyZSdzIG11Y2ggbW9yZSBnb2luZyBvbiBoZXJlIHRoYW4ganVzdCBhIGNvbnZlbmllbnQgc2hvcnQtaGFuZCBmb3Igb2JqZWN0IHByb3BlcnR5IGFjY2Vzcy4gQ29uc2lkZXI6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLWpzIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLWpzIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGtleXdvcmQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZnVuY3Rpb24iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiZm9vIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHBhcmFtZXRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJvYmoiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0IiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ3aXRoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJvYmoiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0XHRhICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG9wZXJhdG9yIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIj0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdCIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblxuIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4ga2V5d29yZCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ2YXIiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgbzEgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gb3BlcmF0b3IiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiPSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cdGEiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI6IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIG51bWJlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJ9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBrZXl3b3JkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInZhciIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBvMiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBvcGVyYXRvciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI9IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcblx0YiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjoiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gbnVtYmVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIn0iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5cbiIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImZvbyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgbzEgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbmNvbnNvbGUiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gZnVuY3Rpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigibG9nIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiBvMSIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJhICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGNvbW1lbnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLy8gMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuXG4iKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJmb28iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIG8yICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI7IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG5jb25zb2xlIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIGZ1bmN0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImxvZyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIigiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgbzIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiYSAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBjb21tZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi8vIHVuZGVmaW5lZCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuY29uc29sZSIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBmdW5jdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJsb2ciKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIoIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIGEgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjsiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gY29tbWVudCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIvLyAyIC0tIE9vcHMsIGxlYWtlZCBnbG9iYWwhIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiB0aGlzIGNvZGUgZXhhbXBsZSwgdHdvIG9iamVjdHMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvMSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibzIiKV0pLAogICAgICAgIF92bS5fdigiIGFyZSBjcmVhdGVkLiBPbmUgaGFzIGFuICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KCIgcHJvcGVydHksIGFuZCB0aGUgb3RoZXIgZG9lcyBub3QuIFRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImZvbyguLikiKV0pLAogICAgICAgIF92bS5fdigiIGZ1bmN0aW9uIHRha2VzIGFuIG9iamVjdCByZWZlcmVuY2UgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvYmoiKV0pLAogICAgICAgIF92bS5fdigiIGFzIGFuIGFyZ3VtZW50LCBhbmQgY2FsbHMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIChvYmopIHsgLi4gfSIpXSksCiAgICAgICAgX3ZtLl92KCIgb24gdGhlIHJlZmVyZW5jZS4gSW5zaWRlIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYmxvY2ssIHdlIG1ha2Ugd2hhdCBhcHBlYXJzIHRvIGJlIGEgbm9ybWFsIGxleGljYWwgcmVmZXJlbmNlIHRvIGEgdmFyaWFibGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBhbiBMSFMgcmVmZXJlbmNlIGluIGZhY3QgKHNlZSBDaGFwdGVyIDEpLCB0byBhc3NpZ24gdG8gaXQgdGhlIHZhbHVlIG9mICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4gd2UgcGFzcyBpbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm8xIildKSwKICAgICAgICBfdm0uX3YoIiwgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSA9IDIiKV0pLAogICAgICAgIF92bS5fdigiIGFzc2lnbm1lbnQgZmluZHMgdGhlIHByb3BlcnR5ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibzEuYSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGFzc2lnbnMgaXQgdGhlIHZhbHVlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgX3ZtLl92KCIsIGFzIHJlZmxlY3RlZCBpbiB0aGUgc3Vic2VxdWVudCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbnNvbGUubG9nKG8xLmEpIildKSwKICAgICAgICBfdm0uX3YoIiBzdGF0ZW1lbnQuIEhvd2V2ZXIsIHdoZW4gd2UgcGFzcyBpbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm8yIildKSwKICAgICAgICBfdm0uX3YoIiwgc2luY2UgaXQgZG9lcyBub3QgaGF2ZSBhbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImEiKV0pLAogICAgICAgIF92bS5fdigiIHByb3BlcnR5LCBubyBzdWNoIHByb3BlcnR5IGlzIGNyZWF0ZWQsIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm8yLmEiKV0pLAogICAgICAgIF92bS5fdigiIHJlbWFpbnMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ1bmRlZmluZWQiKV0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJ1dCB0aGVuIHdlIG5vdGUgYSBwZWN1bGlhciBzaWRlLWVmZmVjdCwgdGhlIGZhY3QgdGhhdCBhIGdsb2JhbCB2YXJpYWJsZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImEiKV0pLAogICAgICAgIF92bS5fdigiIHdhcyBjcmVhdGVkIGJ5IHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImEgPSAyIildKSwKICAgICAgICBfdm0uX3YoIiBhc3NpZ25tZW50LiBIb3cgY2FuIHRoaXMgYmU/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc3RhdGVtZW50IHRha2VzIGFuIG9iamVjdCwgb25lIHdoaWNoIGhhcyB6ZXJvIG9yIG1vcmUgcHJvcGVydGllcywgYW5kICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoInRyZWF0cyB0aGF0IG9iamVjdCBhcyBpZiAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIml0IildKSwKICAgICAgICAgIF92bS5fdigiIGlzIGEgd2hvbGx5IHNlcGFyYXRlIGxleGljYWwgc2NvcGUiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcsIGFuZCB0aHVzIHRoZSBvYmplY3RcJ3MgcHJvcGVydGllcyBhcmUgdHJlYXRlZCBhcyBsZXhpY2FsbHkgZGVmaW5lZCBpZGVudGlmaWVycyBpbiB0aGF0ICJzY29wZSIuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZToiKV0pLAogICAgICAgIF92bS5fdigiIEV2ZW4gdGhvdWdoIGEgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoIiBibG9jayB0cmVhdHMgYW4gb2JqZWN0IGxpa2UgYSBsZXhpY2FsIHNjb3BlLCBhIG5vcm1hbCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInZhciIpXSksCiAgICAgICAgX3ZtLl92KCIgZGVjbGFyYXRpb24gaW5zaWRlIHRoYXQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoIiBibG9jayB3aWxsIG5vdCBiZSBzY29wZWQgdG8gdGhhdCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIGJsb2NrLCBidXQgaW5zdGVhZCB0aGUgY29udGFpbmluZyBmdW5jdGlvbiBzY29wZS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiV2hpbGUgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbCguLikiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZnVuY3Rpb24gY2FuIG1vZGlmeSBleGlzdGluZyBsZXhpY2FsIHNjb3BlIGlmIGl0IHRha2VzIGEgc3RyaW5nIG9mIGNvZGUgd2l0aCBvbmUgb3IgbW9yZSBkZWNsYXJhdGlvbnMgaW4gaXQsIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIHN0YXRlbWVudCBhY3R1YWxseSBjcmVhdGVzIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIndob2xlIG5ldyBsZXhpY2FsIHNjb3BlIildKSwKICAgICAgICBfdm0uX3YoIiBvdXQgb2YgdGhpbiBhaXIsIGZyb20gdGhlIG9iamVjdCB5b3UgcGFzcyB0byBpdC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdignVW5kZXJzdG9vZCBpbiB0aGlzIHdheSwgdGhlICJzY29wZSIgZGVjbGFyZWQgYnkgdGhlICcpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2l0aCIpXSksCiAgICAgICAgX3ZtLl92KCIgc3RhdGVtZW50IHdoZW4gd2UgcGFzc2VkIGluICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibzEiKV0pLAogICAgICAgIF92bS5fdigiIHdhcyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm8xIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnLCBhbmQgdGhhdCAic2NvcGUiIGhhZCBhbiAiaWRlbnRpZmllciIgaW4gaXQgd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhlICcKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibzEuYSIpXSksCiAgICAgICAgX3ZtLl92KCIgcHJvcGVydHkuIEJ1dCB3aGVuIHdlIHVzZWQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvMiIpXSksCiAgICAgICAgX3ZtLl92KCcgYXMgdGhlICJzY29wZSIsIGl0IGhhZCBubyBzdWNoICcpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyAiaWRlbnRpZmllciIgaW4gaXQsIGFuZCBzbyB0aGUgbm9ybWFsIHJ1bGVzIG9mIExIUyBpZGVudGlmaWVyIGxvb2stdXAgKHNlZSBDaGFwdGVyIDEpIG9jY3VycmVkLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCdOZWl0aGVyIHRoZSAic2NvcGUiIG9mICcpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibzIiKV0pLAogICAgICAgIF92bS5fdigiLCBub3IgdGhlIHNjb3BlIG9mICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZm9vKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIsIG5vciB0aGUgZ2xvYmFsIHNjb3BlIGV2ZW4sIGhhcyBhbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImEiKV0pLAogICAgICAgIF92bS5fdigiIGlkZW50aWZpZXIgdG8gYmUgZm91bmQsIHNvIHdoZW4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJhID0gMiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBleGVjdXRlZCwgaXQgcmVzdWx0cyBpbiB0aGUgYXV0b21hdGljLWdsb2JhbCBiZWluZyBjcmVhdGVkIChzaW5jZSB3ZSdyZSBpbiBub24tc3RyaWN0IG1vZGUpLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJdCBpcyBhIHN0cmFuZ2Ugc29ydCBvZiBtaW5kLWJlbmRpbmcgdGhvdWdodCB0byBzZWUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIHR1cm5pbmcsIGF0IHJ1bnRpbWUsIGFuIG9iamVjdCBhbmQgaXRzIHByb3BlcnRpZXMgaW50byBhICJzY29wZSIgJwogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigid2l0aCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyAiaWRlbnRpZmllcnMiLiBCdXQgdGhhdCBpcyB0aGUgY2xlYXJlc3QgZXhwbGFuYXRpb24gSSBjYW4gZ2l2ZSBmb3IgdGhlIHJlc3VsdHMgd2Ugc2VlLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGU6IildKSwKICAgICAgICBfdm0uX3YoIiBJbiBhZGRpdGlvbiB0byBiZWluZyBhIGJhZCBpZGVhIHRvIHVzZSwgYm90aCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoIiBhcmUgYWZmZWN0ZWQgKHJlc3RyaWN0ZWQpIGJ5IFN0cmljdCBNb2RlLiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgb3V0cmlnaHQgZGlzYWxsb3dlZCwgd2hlcmVhcyB2YXJpb3VzIGZvcm1zIG9mIGluZGlyZWN0IG9yIHVuc2FmZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiBhcmUgZGlzYWxsb3dlZCB3aGlsZSByZXRhaW5pbmcgdGhlIGNvcmUgZnVuY3Rpb25hbGl0eS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwZXJmb3JtYW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGVyZm9ybWFuY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBlcmZvcm1hbmNlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkJvdGggIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2l0aCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjaGVhdCB0aGUgb3RoZXJ3aXNlIGF1dGhvci10aW1lIGRlZmluZWQgbGV4aWNhbCBzY29wZSBieSBtb2RpZnlpbmcgb3IgY3JlYXRpbmcgbmV3IGxleGljYWwgc2NvcGUgYXQgcnVudGltZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTbywgd2hhdCdzIHRoZSBiaWcgZGVhbCwgeW91IGFzaz8gSWYgdGhleSBvZmZlciBtb3JlIHNvcGhpc3RpY2F0ZWQgZnVuY3Rpb25hbGl0eSBhbmQgY29kaW5nIGZsZXhpYmlsaXR5LCBhcmVuJ3QgdGhlc2UgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZ29vZCIpXSksCiAgICAgICAgX3ZtLl92KCIgZmVhdHVyZXM/ICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOby4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgSmF2YVNjcmlwdCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJFbmdpbmUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaGFzIGEgbnVtYmVyIG9mIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnMgdGhhdCBpdCBwZXJmb3JtcyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIHBoYXNlLiBTb21lIG9mIHRoZXNlIGJvaWwgZG93biB0byBiZWluZyBhYmxlIHRvIGVzc2VudGlhbGx5IHN0YXRpY2FsbHkgYW5hbHl6ZSB0aGUgY29kZSBhcyBpdCBsZXhlcywgYW5kIHByZS1kZXRlcm1pbmUgd2hlcmUgYWxsIHRoZSB2YXJpYWJsZSBhbmQgZnVuY3Rpb24gZGVjbGFyYXRpb25zIGFyZSwgc28gdGhhdCBpdCB0YWtlcyBsZXNzIGVmZm9ydCB0byByZXNvbHZlIGlkZW50aWZpZXJzIGR1cmluZyBleGVjdXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkJ1dCBpZiB0aGUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRW5naW5lIildKSwKICAgICAgICBfdm0uX3YoIiBmaW5kcyBhbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIGluIHRoZSBjb2RlLCBpdCBlc3NlbnRpYWxseSBoYXMgdG8gIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiYXNzdW1lIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRoYXQgYWxsIGl0cyBhd2FyZW5lc3Mgb2YgaWRlbnRpZmllciBsb2NhdGlvbiBtYXkgYmUgaW52YWxpZCwgYmVjYXVzZSBpdCBjYW5ub3Qga25vdyBhdCBsZXhpbmcgdGltZSBleGFjdGx5IHdoYXQgY29kZSB5b3UgbWF5IHBhc3MgdG8gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byBtb2RpZnkgdGhlIGxleGljYWwgc2NvcGUsIG9yIHRoZSBjb250ZW50cyBvZiB0aGUgb2JqZWN0IHlvdSBtYXkgcGFzcyB0byAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIHRvIGNyZWF0ZSBhIG5ldyBsZXhpY2FsIHNjb3BlIHRvIGJlIGNvbnN1bHRlZC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBvdGhlciB3b3JkcywgaW4gdGhlIHBlc3NpbWlzdGljIHNlbnNlLCBtb3N0IG9mIHRob3NlIG9wdGltaXphdGlvbnMgaXQgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigid291bGQiKV0pLAogICAgICAgIF92bS5fdigiIG1ha2UgYXJlIHBvaW50bGVzcyBpZiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWwoLi4pIildKSwKICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIndpdGgiKV0pLAogICAgICAgIF92bS5fdigiIGFyZSBwcmVzZW50LCBzbyBpdCBzaW1wbHkgZG9lc24ndCBwZXJmb3JtIHRoZSBvcHRpbWl6YXRpb25zICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImF0IGFsbCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91ciBjb2RlIHdpbGwgYWxtb3N0IGNlcnRhaW5seSB0ZW5kIHRvIHJ1biBzbG93ZXIgc2ltcGx5IGJ5IHRoZSBmYWN0IHRoYXQgeW91IGluY2x1ZGUgYW4gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ3aXRoIildKSwKICAgICAgICBfdm0uX3YoIiBhbnl3aGVyZSBpbiB0aGUgY29kZS4gTm8gbWF0dGVyIGhvdyBzbWFydCB0aGUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRW5naW5lIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG1heSBiZSBhYm91dCB0cnlpbmcgdG8gbGltaXQgdGhlIHNpZGUtZWZmZWN0cyBvZiB0aGVzZSBwZXNzaW1pc3RpYyBhc3N1bXB0aW9ucywgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInRoZXJlJ3Mgbm8gZ2V0dGluZyBhcm91bmQgdGhlIGZhY3QgdGhhdCB3aXRob3V0IHRoZSBvcHRpbWl6YXRpb25zLCBjb2RlIHJ1bnMgc2xvd2VyLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZXZpZXctdGwtZHIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Jldmlldy10bC1kciIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmV2aWV3IChUTDtEUikiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXhpY2FsIHNjb3BlIG1lYW5zIHRoYXQgc2NvcGUgaXMgZGVmaW5lZCBieSBhdXRob3ItdGltZSBkZWNpc2lvbnMgb2Ygd2hlcmUgZnVuY3Rpb25zIGFyZSBkZWNsYXJlZC4gVGhlIGxleGluZyBwaGFzZSBvZiBjb21waWxhdGlvbiBpcyBlc3NlbnRpYWxseSBhYmxlIHRvIGtub3cgd2hlcmUgYW5kIGhvdyBhbGwgaWRlbnRpZmllcnMgYXJlIGRlY2xhcmVkLCBhbmQgdGh1cyBwcmVkaWN0IGhvdyB0aGV5IHdpbGwgYmUgbG9va2VkLXVwIGR1cmluZyBleGVjdXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoJ1R3byBtZWNoYW5pc21zIGluIEphdmFTY3JpcHQgY2FuICJjaGVhdCIgbGV4aWNhbCBzY29wZTogJyksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsKC4uKSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2l0aCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJy4gVGhlIGZvcm1lciBjYW4gbW9kaWZ5IGV4aXN0aW5nIGxleGljYWwgc2NvcGUgKGF0IHJ1bnRpbWUpIGJ5IGV2YWx1YXRpbmcgYSBzdHJpbmcgb2YgImNvZGUiIHdoaWNoIGhhcyBvbmUgb3IgbW9yZSBkZWNsYXJhdGlvbnMgaW4gaXQuIFRoZSBsYXR0ZXIgZXNzZW50aWFsbHkgY3JlYXRlcyBhIHdob2xlIG5ldyBsZXhpY2FsIHNjb3BlIChhZ2FpbiwgYXQgcnVudGltZSkgYnkgdHJlYXRpbmcgYW4gb2JqZWN0IHJlZmVyZW5jZSAnCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJhcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyBhICJzY29wZSIgYW5kIHRoYXQgb2JqZWN0XCdzIHByb3BlcnRpZXMgYXMgc2NvcGVkIGlkZW50aWZpZXJzLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgZG93bnNpZGUgdG8gdGhlc2UgbWVjaGFuaXNtcyBpcyB0aGF0IGl0IGRlZmVhdHMgdGhlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkVuZ2luZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIidzIGFiaWxpdHkgdG8gcGVyZm9ybSBjb21waWxlLXRpbWUgb3B0aW1pemF0aW9ucyByZWdhcmRpbmcgc2NvcGUgbG9vay11cCwgYmVjYXVzZSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRW5naW5lIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGhhcyB0byBhc3N1bWUgcGVzc2ltaXN0aWNhbGx5IHRoYXQgc3VjaCBvcHRpbWl6YXRpb25zIHdpbGwgYmUgaW52YWxpZC4gQ29kZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ3aWxsIildKSwKICAgICAgICBfdm0uX3YoIiBydW4gc2xvd2VyIGFzIGEgcmVzdWx0IG9mIHVzaW5nIGVpdGhlciBmZWF0dXJlLiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRG9uJ3QgdXNlIHRoZW0uIildKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}