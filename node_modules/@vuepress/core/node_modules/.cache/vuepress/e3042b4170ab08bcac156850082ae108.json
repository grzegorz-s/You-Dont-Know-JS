{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/async_and_performance/ch5.md?vue&type=template&id=6c6b513d&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/async_and_performance/ch5.md","mtime":1572780326871},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "you-don-t-know-js-async-performance" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#you-don-t-know-js-async-performance" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" You Don't Know JS: Async & Performance")
      ]),
      _vm._v(" "),
      _c("h1", { attrs: { id: "chapter-5-program-performance" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#chapter-5-program-performance" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Chapter 5: Program Performance")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This book so far has been all about how to leverage asynchrony patterns more effectively. But we haven't directly addressed why asynchrony really matters to JS. The most obvious explicit reason is "
        ),
        _c("strong", [_vm._v("performance")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For example, if you have two Ajax requests to make, and they're independent, but you need to wait on them both to finish before doing the next task, you have two options for modeling that interaction: serial and concurrent."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'You could make the first request and wait to start the second request until the first finishes. Or, as we\'ve seen both with promises and generators, you could make both requests "in parallel," and express the "gate" to wait on both of them before moving on.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Clearly, the latter is usually going to be more performant than the former. And better performance generally leads to better user experience."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's even possible that asynchrony (interleaved concurrency) can improve just the perception of performance, even if the overall program still takes the same amount of time to complete. User perception of performance is every bit -- if not more! -- as important as actual measurable performance."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We want to now move beyond localized asynchrony patterns to talk about some bigger picture performance details at the program level."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(" You may be wondering about micro-performance issues like if "),
        _c("code", [_vm._v("a++")]),
        _vm._v(" or "),
        _c("code", [_vm._v("++a")]),
        _vm._v(
          ' is faster. We\'ll look at those sorts of performance details in the next chapter on "Benchmarking & Tuning."'
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "web-workers" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#web-workers" } },
          [_vm._v("#")]
        ),
        _vm._v(" Web Workers")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If you have processing-intensive tasks but you don't want them to run on the main thread (which may slow down the browser/UI), you might have wished that JavaScript could operate in a multithreaded manner."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In Chapter 1, we talked in detail about how JavaScript is single threaded. And that's still true. But a single thread isn't the only way to organize the execution of your program."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Imagine splitting your program into two pieces, and running one of those pieces on the main UI thread, and running the other piece on an entirely separate thread."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("What kinds of concerns would such an architecture bring up?")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For one, you'd want to know if running on a separate thread meant that it ran in parallel (on systems with multiple CPUs/cores) such that a long-running process on that second thread would "
        ),
        _c("strong", [_vm._v("not")]),
        _vm._v(
          ' block the main program thread. Otherwise, "virtual threading" wouldn\'t be of much benefit over what we already have in JS with async concurrency.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "And you'd want to know if these two pieces of the program have access to the same shared scope/resources. If they do, then you have all the questions that multithreaded languages (Java, C++, etc.) deal with, such as needing cooperative or preemptive locking (mutexes, etc.). That's a lot of extra work, and shouldn't be undertaken lightly."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Alternatively, you'd want to know how these two pieces could \"communicate\" if they couldn't share scope/resources."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'All these are great questions to consider as we explore a feature added to the web platform circa HTML5 called "Web Workers." This is a feature of the browser (aka host environment) and actually has almost nothing to do with the JS language itself. That is, JavaScript does not '
        ),
        _c("em", [_vm._v("currently")]),
        _vm._v(" have any features that support threaded execution.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'But an environment like your browser can easily provide multiple instances of the JavaScript engine, each on its own thread, and let you run a different program in each thread. Each of those separate threaded pieces of your program is called a "(Web) Worker." This type of parallelism is called "task parallelism," as the emphasis is on splitting up chunks of your program to run in parallel.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "From your main JS program (or another Worker), you instantiate a Worker like so:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" w1 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Worker")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"http://some.url.1/mycoolworker.js"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "The URL should point to the location of a JS file (not an HTML page!) which is intended to be loaded into a Worker. The browser will then spin up a separate thread and let that file run as an independent program in that thread."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          ' The kind of Worker created with such a URL is called a "Dedicated Worker." But instead of providing a URL to an external file, you can also create an "Inline Worker" by providing a Blob URL (another HTML5 feature); essentially it\'s an inline file stored in a single (binary) value. However, Blobs are beyond the scope of what we\'ll discuss here.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Workers do not share any scope or resources with each other or the main program -- that would bring all the nightmares of threaded programming to the forefront -- but instead have a basic event messaging mechanism connecting them."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The "),
        _c("code", [_vm._v("w1")]),
        _vm._v(
          " Worker object is an event listener and trigger, which lets you subscribe to events sent by the Worker as well as send events to the Worker."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Here's how to listen for events (actually, the fixed "),
        _c("code", [_vm._v('"message"')]),
        _vm._v(" event):")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("w1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("addEventListener")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"message"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("evt")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// evt.data")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("And you can send the "),
        _c("code", [_vm._v('"message"')]),
        _vm._v(" event to the Worker:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("w1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("postMessage")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"something cool to say"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Inside the Worker, the messaging is totally symmetrical:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// "mycoolworker.js"')
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("addEventListener")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"message"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("evt")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// evt.data")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("postMessage")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"a really cool reply"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Notice that a dedicated Worker is in a one-to-one relationship with the program that created it. That is, the "
        ),
        _c("code", [_vm._v('"message"')]),
        _vm._v(
          " event doesn't need any disambiguation here, because we're sure that it could only have come from this one-to-one relationship -- either it came from the Worker or the main page."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Usually the main page application creates the Workers, but a Worker can instantiate its own child Worker(s) -- known as subworkers -- as necessary. Sometimes this is useful to delegate such details to a sort of "master" Worker that spawns other Workers to process parts of a task. Unfortunately, at the time of this writing, Chrome still does not support subworkers, while Firefox does.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "To kill a Worker immediately from the program that created it, call "
        ),
        _c("code", [_vm._v("terminate()")]),
        _vm._v(" on the Worker object (like "),
        _c("code", [_vm._v("w1")]),
        _vm._v(
          " in the previous snippets). Abruptly terminating a Worker thread does not give it any chance to finish up its work or clean up any resources. It's akin to you closing a browser tab to kill a page."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'If you have two or more pages (or multiple tabs with the same page!) in the browser that try to create a Worker from the same file URL, those will actually end up as completely separate Workers. Shortly, we\'ll discuss a way to "share" a Worker.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " It may seem like a malicious or ignorant JS program could easily perform a denial-of-service attack on a system by spawning hundreds of Workers, seemingly each with their own thread. While it's true that it's somewhat of a guarantee that a Worker will end up on a separate thread, this guarantee is not unlimited. The system is free to decide how many actual threads/CPUs/cores it really wants to create. There's no way to predict or guarantee how many you'll have access to, though many people assume it's at least as many as the number of CPUs/cores available. I think the safest assumption is that there's at least one other thread besides the main UI thread, but that's about it."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "worker-environment" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#worker-environment" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Worker Environment")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Inside the Worker, you do not have access to any of the main program's resources. That means you cannot access any of its global variables, nor can you access the page's DOM or other resources. Remember: it's a totally separate thread."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "You can, however, perform network operations (Ajax, WebSockets) and set timers. Also, the Worker has access to its own copy of several important global variables/features, including "
        ),
        _c("code", [_vm._v("navigator")]),
        _vm._v(", "),
        _c("code", [_vm._v("location")]),
        _vm._v(", "),
        _c("code", [_vm._v("JSON")]),
        _vm._v(", and "),
        _c("code", [_vm._v("applicationCache")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("You can also load extra JS scripts into your Worker, using "),
        _c("code", [_vm._v("importScripts(..)")]),
        _vm._v(":")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// inside the Worker")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("importScripts")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"foo.js"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"bar.js"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("These scripts are loaded synchronously, which means the "),
        _c("code", [_vm._v("importScripts(..)")]),
        _vm._v(
          " call will block the rest of the Worker's execution until the file(s) are finished loading and executing."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(" There have also been some discussions about exposing the "),
        _c("code", [_vm._v("<canvas>")]),
        _vm._v(
          " API to Workers, which combined with having canvases be Transferables (see the \"Data Transfer\" section), would allow Workers to perform more sophisticated off-thread graphics processing, which can be useful for high-performance gaming (WebGL) and other similar applications. Although this doesn't exist yet in any browsers, it's likely to happen in the near future."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("What are some common uses for Web Workers?")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Processing intensive math calculations")]),
        _vm._v(" "),
        _c("li", [_vm._v("Sorting large data sets")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Data operations (compression, audio analysis, image pixel manipulations, etc.)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("High-traffic network communications")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "data-transfer" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#data-transfer" } },
          [_vm._v("#")]
        ),
        _vm._v(" Data Transfer")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "You may notice a common characteristic of most of those uses, which is that they require a large amount of information to be transferred across the barrier between threads using the event mechanism, perhaps in both directions."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In the early days of Workers, serializing all data to a string value was the only option. In addition to the speed penalty of the two-way serializations, the other major negative was that the data was being copied, which meant a doubling of memory usage (and the subsequent churn of garbage collection)."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Thankfully, we now have a few better options.")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'If you pass an object, a so-called "Structured Cloning Algorithm" (https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm) is used to copy/duplicate the object on the other side. This algorithm is fairly sophisticated and can even handle duplicating objects with circular references. The to-string/from-string performance penalty is not paid, but we still have duplication of memory using this approach. There is support for this in IE10 and above, as well as all the other major browsers.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'An even better option, especially for larger data sets, is "Transferable Objects" (http://updates.html5rocks.com/2011/12/Transferable-Objects-Lightning-Fast). What happens is that the object\'s "ownership" is transferred, but the data itself is not moved. Once you transfer away an object to a Worker, it\'s empty or inaccessible in the originating location -- that eliminates the hazards of threaded programming over a shared scope. Of course, transfer of ownership can go in both directions.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "There really isn't much you need to do to opt into a Transferable Object; any data structure that implements the Transferable interface (https://developer.mozilla.org/en-US/docs/Web/API/Transferable) will automatically be transferred this way (support Firefox & Chrome)."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("For example, typed arrays like "),
        _c("code", [_vm._v("Uint8Array")]),
        _vm._v(" (see the "),
        _c("em", [_vm._v("ES6 & Beyond")]),
        _vm._v(
          ' title of this series) are "Transferables." This is how you\'d send a Transferable Object using '
        ),
        _c("code", [_vm._v("postMessage(..)")]),
        _vm._v(":")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// `foo` is a `Uint8Array` for instance")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("postMessage")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" foo"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("buffer"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v(" foo"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("buffer "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "The first parameter is the raw buffer and the second parameter is a list of what to transfer."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Browsers that don't support Transferable Objects simply degrade to structured cloning, which means performance reduction rather than outright feature breakage."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "shared-workers" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#shared-workers" } },
          [_vm._v("#")]
        ),
        _vm._v(" Shared Workers")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If your site or app allows for loading multiple tabs of the same page (a common feature), you may very well want to reduce the resource usage of their system by preventing duplicate dedicated Workers; the most common limited resource in this respect is a socket network connection, as browsers limit the number of simultaneous connections to a single host. Of course, limiting multiple connections from a client also eases your server resource requirements."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In this case, creating a single centralized Worker that all the page instances of your site or app can "
        ),
        _c("em", [_vm._v("share")]),
        _vm._v(" is quite useful.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("That's called a "),
        _c("code", [_vm._v("SharedWorker")]),
        _vm._v(
          ", which you create like so (support for this is limited to Firefox and Chrome):"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" w1 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("SharedWorker")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"http://some.url.1/mycoolworker.js"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          'Because a shared Worker can be connected to or from more than one program instance or page on your site, the Worker needs a way to know which program a message comes from. This unique identification is called a "port" -- think network socket ports. So the calling program must use the '
        ),
        _c("code", [_vm._v("port")]),
        _vm._v(" object of the Worker for communication:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("w1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("port"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("addEventListener")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"message"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" handleMessages "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ..")
            ]),
            _vm._v("\n\nw1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("port"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("postMessage")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"something cool"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [_vm._v("Also, the port connection must be initialized, as:")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("w1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("port"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("start")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Inside the shared Worker, an extra event must be handled: "),
        _c("code", [_vm._v('"connect"')]),
        _vm._v(". This event provides the port "),
        _c("code", [_vm._v("object")]),
        _vm._v(
          " for that particular connection. The most convenient way to keep multiple connections separate is to use closure (see "
        ),
        _c("em", [_vm._v("Scope & Closures")]),
        _vm._v(" title of this series) over the "),
        _c("code", [_vm._v("port")]),
        _vm._v(
          ", as shown next, with the event listening and transmitting for that connection defined inside the handler for the "
        ),
        _c("code", [_vm._v('"connect"')]),
        _vm._v(" event:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// inside the shared Worker")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("addEventListener")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"connect"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("evt")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// the assigned port for this connection")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" port "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" evt"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("ports"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\tport"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("addEventListener")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"message"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("evt")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ..")
            ]),
            _vm._v("\n\n\t\tport"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("postMessage")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ..")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// initialize the port connection")
            ]),
            _vm._v("\n\tport"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("start")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Other than that difference, shared and dedicated Workers have the same capabilities and semantics."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " Shared Workers survive the termination of a port connection if other port connections are still alive, whereas dedicated Workers are terminated whenever the connection to their initiating program is terminated."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "polyfilling-web-workers" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#polyfilling-web-workers" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Polyfilling Web Workers")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Web Workers are very attractive performance-wise for running JS programs in parallel. However, you may be in a position where your code needs to run in older browsers that lack support. Because Workers are an API and not a syntax, they can be polyfilled, to an extent."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If a browser doesn't support Workers, there's simply no way to fake multithreading from the performance perspective. Iframes are commonly thought of to provide a parallel environment, but in all modern browsers they actually run on the same thread as the main page, so they're not sufficient for faking parallelism."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "As we detailed in Chapter 1, JS's asynchronicity (not parallelism) comes from the event loop queue, so you can force faked Workers to be asynchronous using timers ("
        ),
        _c("code", [_vm._v("setTimeout(..)")]),
        _vm._v(
          ", etc.). Then you just need to provide a polyfill for the Worker API. There are some listed here (https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#web-workers), but frankly none of them look great."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("I've written a sketch of a polyfill for "),
        _c("code", [_vm._v("Worker")]),
        _vm._v(
          " here (https://gist.github.com/getify/1b26accb1a09aa53ad25). It's basic, but it should get the job done for simple "
        ),
        _c("code", [_vm._v("Worker")]),
        _vm._v(
          " support, given that the two-way messaging works correctly as well as "
        ),
        _c("code", [_vm._v('"onerror"')]),
        _vm._v(
          " handling. You could probably also extend it with more features, such as "
        ),
        _c("code", [_vm._v("terminate()")]),
        _vm._v(" or faked Shared Workers, as you see fit.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " You can't fake synchronous blocking, so this polyfill just disallows use of "
        ),
        _c("code", [_vm._v("importScripts(..)")]),
        _vm._v(
          ". Another option might have been to parse and transform the Worker's code (once Ajax loaded) to handle rewriting to some asynchronous form of an "
        ),
        _c("code", [_vm._v("importScripts(..)")]),
        _vm._v(" polyfill, perhaps with a promise-aware interface.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "simd" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#simd" } }, [
          _vm._v("#")
        ]),
        _vm._v(" SIMD")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Single instruction, multiple data (SIMD) is a form of "data parallelism," as contrasted to "task parallelism" with Web Workers, because the emphasis is not really on program logic chunks being parallelized, but rather multiple bits of data being processed in parallel.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'With SIMD, threads don\'t provide the parallelism. Instead, modern CPUs provide SIMD capability with "vectors" of numbers -- think: type specialized arrays -- as well as instructions that can operate in parallel across all the numbers; these are low-level operations leveraging instruction-level parallelism.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The effort to expose SIMD capability to JavaScript is primarily spearheaded by Intel (https://01.org/node/1495), namely by Mohammad Haghighat (at the time of this writing), in cooperation with Firefox and Chrome teams. SIMD is on an early standards track with a good chance of making it into a future revision of JavaScript, likely in the ES7 timeframe."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'SIMD JavaScript proposes to expose short vector types and APIs to JS code, which on those SIMD-enabled systems would map the operations directly through to the CPU equivalents, with fallback to non-parallelized operation "shims" on non-SIMD systems.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The performance benefits for data-intensive applications (signal analysis, matrix operations on graphics, etc.) with such parallel math processing are quite obvious!"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Early proposal forms of the SIMD API at the time of this writing look like this:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" v1 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("float32x4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3.14159")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("21.0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("32.3")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("55.55")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" v2 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("float32x4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2.1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3.2")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4.3")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("5.4")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" v3 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("int32x4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("101")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1001")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10001")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" v4 "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("int32x4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("20")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("30")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("40")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("float32x4"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mul")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" v1"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" v2 "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// [ 6.597339, 67.2, 138.89, 299.97 ]")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token constant" } }, [
              _vm._v("SIMD")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("int32x4"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("add")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" v3"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" v4 "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// [ 20, 121, 1031, 10041 ]")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Shown here are two different vector data types, 32-bit floating-point numbers and 32-bit integer numbers. You can see that these vectors are sized exactly to four 32-bit elements, as this matches the SIMD vector sizes (128-bit) available in most modern CPUs. It's also possible we may see an "
        ),
        _c("code", [_vm._v("x8")]),
        _vm._v(" (or larger!) version of these APIs in the future.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Besides "),
        _c("code", [_vm._v("mul()")]),
        _vm._v(" and "),
        _c("code", [_vm._v("add()")]),
        _vm._v(", many other operations are likely to be included, such as "),
        _c("code", [_vm._v("sub()")]),
        _vm._v(", "),
        _c("code", [_vm._v("div()")]),
        _vm._v(", "),
        _c("code", [_vm._v("abs()")]),
        _vm._v(", "),
        _c("code", [_vm._v("neg()")]),
        _vm._v(", "),
        _c("code", [_vm._v("sqrt()")]),
        _vm._v(", "),
        _c("code", [_vm._v("reciprocal()")]),
        _vm._v(", "),
        _c("code", [_vm._v("reciprocalSqrt()")]),
        _vm._v(" (arithmetic), "),
        _c("code", [_vm._v("shuffle()")]),
        _vm._v(" (rearrange vector elements), "),
        _c("code", [_vm._v("and()")]),
        _vm._v(", "),
        _c("code", [_vm._v("or()")]),
        _vm._v(", "),
        _c("code", [_vm._v("xor()")]),
        _vm._v(", "),
        _c("code", [_vm._v("not()")]),
        _vm._v(" (logical), "),
        _c("code", [_vm._v("equal()")]),
        _vm._v(", "),
        _c("code", [_vm._v("greaterThan()")]),
        _vm._v(", "),
        _c("code", [_vm._v("lessThan()")]),
        _vm._v(" (comparison), "),
        _c("code", [_vm._v("shiftLeft()")]),
        _vm._v(", "),
        _c("code", [_vm._v("shiftRightLogical()")]),
        _vm._v(", "),
        _c("code", [_vm._v("shiftRightArithmetic()")]),
        _vm._v(" (shifts), "),
        _c("code", [_vm._v("fromFloat32x4()")]),
        _vm._v(", and "),
        _c("code", [_vm._v("fromInt32x4()")]),
        _vm._v(" (conversions).")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " There's an official \"prollyfill\" (hopeful, expectant, future-leaning polyfill) for the SIMD functionality available (https://github.com/johnmccutchan/ecmascript_simd), which illustrates a lot more of the planned SIMD capability than we've illustrated in this section."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "asm-js" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#asm-js" } }, [
          _vm._v("#")
        ]),
        _vm._v(" asm.js")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"asm.js" (http://asmjs.org/) is a label for a highly optimizable subset of the JavaScript language. By carefully avoiding certain mechanisms and patterns that are '
        ),
        _c("em", [_vm._v("hard")]),
        _vm._v(
          " to optimize (garbage collection, coercion, etc.), asm.js-styled code can be recognized by the JS engine and given special attention with aggressive low-level optimizations."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Distinct from other program performance mechanisms discussed in this chapter, asm.js isn't necessarily something that needs to be adopted into the JS language specification. There "
        ),
        _c("em", [_vm._v("is")]),
        _vm._v(
          " an asm.js specification (http://asmjs.org/spec/latest/), but it's mostly for tracking an agreed upon set of candidate inferences for optimization rather than a set of requirements of JS engines."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "There's not currently any new syntax being proposed. Instead, asm.js suggests ways to recognize existing standard JS syntax that conforms to the rules of asm.js and let engines implement their own optimizations accordingly."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "There's been some disagreement between browser vendors over exactly how asm.js should be activated in a program. Early versions of the asm.js experiment required a "
        ),
        _c("code", [_vm._v('"use asm";')]),
        _vm._v(" pragma (similar to strict mode's "),
        _c("code", [_vm._v('"use strict";')]),
        _vm._v(
          ") to help clue the JS engine to be looking for asm.js optimization opportunities and hints. Others have asserted that asm.js should just be a set of heuristics that engines automatically recognize without the author having to do anything extra, meaning that existing programs could theoretically benefit from asm.js-style optimizations without doing anything special."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "how-to-optimize-with-asm-js" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#how-to-optimize-with-asm-js" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" How to Optimize with asm.js")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The first thing to understand about asm.js optimizations is around types and coercion (see the "
        ),
        _c("em", [_vm._v("Types & Grammar")]),
        _vm._v(
          " title of this series). If the JS engine has to track multiple different types of values in a variable through various operations, so that it can handle coercions between types as necessary, that's a lot of extra work that keeps the program optimization suboptimal."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " We're going to use asm.js-style code here for illustration purposes, but be aware that it's not commonly expected that you'll author such code by hand. asm.js is more intended to a compilation target from other tools, such as Emscripten (https://github.com/kripken/emscripten/wiki). It's of course possible to write your own asm.js code, but that's usually a bad idea because the code is very low level and managing it can be very time consuming and error prone. Nevertheless, there may be cases where you'd want to hand tweak your code for asm.js optimization purposes."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'There are some "tricks" you can use to hint to an asm.js-aware JS engine what the intended type is for variables/operations, so that it can skip these coercion tracking steps.'
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("For example:")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" a "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("42")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ..")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" b "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" a"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("In that program, the "),
        _c("code", [_vm._v("b = a")]),
        _vm._v(
          " assignment leaves the door open for type divergence in variables. However, it could instead be written as:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" a "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("42")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ..")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" b "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" a "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Here, we've used the "),
        _c("code", [_vm._v("|")]),
        _vm._v(' ("binary OR") with value '),
        _c("code", [_vm._v("0")]),
        _vm._v(
          ", which has no effect on the value other than to make sure it's a 32-bit integer. That code run in a normal JS engine works just fine, but when run in an asm.js-aware JS engine it "
        ),
        _c("em", [_vm._v("can")]),
        _vm._v(" signal that "),
        _c("code", [_vm._v("b")]),
        _vm._v(
          " should always be treated as a 32-bit integer, so the coercion tracking can be skipped."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Similarly, the addition operation between two variables can be restricted to a more performant integer addition (instead of floating point):"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("a "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" b"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Again, the asm.js-aware JS engine can see that hint and infer that the "
        ),
        _c("code", [_vm._v("+")]),
        _vm._v(
          " operation should be 32-bit integer addition because the end result of the whole expression would automatically be 32-bit integer conformed anyway."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "asm-js-modules" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#asm-js-modules" } },
          [_vm._v("#")]
        ),
        _vm._v(" asm.js Modules")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'One of the biggest detractors to performance in JS is around memory allocation, garbage collection, and scope access. asm.js suggests one of the ways around these issues is to declare a more formalized asm.js "module" -- do not confuse these with ES6 modules; see the '
        ),
        _c("em", [_vm._v("ES6 & Beyond")]),
        _vm._v(" title of this series.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For an asm.js module, you need to explicitly pass in a tightly conformed namespace -- this is referred to in the spec as "
        ),
        _c("code", [_vm._v("stdlib")]),
        _vm._v(
          ", as it should represent standard libraries needed -- to import necessary symbols, rather than just using globals via lexical scope. In the base case, the "
        ),
        _c("code", [_vm._v("window")]),
        _vm._v(" object is an acceptable "),
        _c("code", [_vm._v("stdlib")]),
        _vm._v(
          " object for asm.js module purposes, but you could and perhaps should construct an even more restricted one."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'You also must declare a "heap" -- which is just a fancy term for a reserved spot in memory where variables can already be used without asking for more memory or releasing previously used memory -- and pass that in, so that the asm.js module won\'t need to do anything that would cause memory churn; it can just use the pre-reserved space.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v('A "heap" is likely a typed '),
        _c("code", [_vm._v("ArrayBuffer")]),
        _vm._v(", such as:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" heap "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ArrayBuffer")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0x10000")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 64k heap")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Using that pre-reserved 64k of binary space, an asm.js module can store and retrieve values in that buffer without any memory allocation or garbage collection penalties. For example, the "
        ),
        _c("code", [_vm._v("heap")]),
        _vm._v(
          " buffer could be used inside the module to back an array of 64-bit float values like this:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" arr "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Float64Array")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" heap "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "OK, so let's make a quick, silly example of an asm.js-styled module to illustrate how these pieces fit together. We'll define a "
        ),
        _c("code", [_vm._v("foo(..)")]),
        _vm._v(" that takes a start ("),
        _c("code", [_vm._v("x")]),
        _vm._v(") and end ("),
        _c("code", [_vm._v("y")]),
        _vm._v(
          ") integer for a range, and calculates all the inner adjacent multiplications of the values in the range, and then finally averages those values together:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("fooASM")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("stdlib"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("foreign"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("heap")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"use asm"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" arr "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("stdlib"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(".")
              ]),
              _vm._v("Int32Array")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" heap "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("foo")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("x"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v("y")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tx "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" x "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\ty "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" y "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" sum "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" count "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("y"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("-")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("x"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// calculate all the inner adjacent multiplications")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" x "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("y "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t\tp "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("8")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// store result")
            ]),
            _vm._v("\n\t\t\tarr"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v(" p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("*")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// calculate average of all intermediate values")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("count "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t\tp "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("8")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t\tsum "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("sum "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" arr"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v(" p "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">>")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("3")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("|")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("sum "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("/")
            ]),
            _vm._v(" count"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tfoo"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" foo\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" heap "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("ArrayBuffer")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0x1000")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" foo "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("fooASM")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" window"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("null")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" heap "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("foo"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("foo")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("10")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("20")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 233")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " This asm.js example is hand authored for illustration purposes, so it doesn't represent the same code that would be produced from a compilation tool targeting asm.js. But it does show the typical nature of asm.js code, especially the type hinting and use of the "
        ),
        _c("code", [_vm._v("heap")]),
        _vm._v(" buffer for temporary variable storage.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The first call to "),
        _c("code", [_vm._v("fooASM(..)")]),
        _vm._v(" is what sets up our asm.js module with its "),
        _c("code", [_vm._v("heap")]),
        _vm._v(" allocation. The result is a "),
        _c("code", [_vm._v("foo(..)")]),
        _vm._v(" function we can call as many times as necessary. Those "),
        _c("code", [_vm._v("foo(..)")]),
        _vm._v(
          " calls should be specially optimized by an asm.js-aware JS engine. Importantly, the preceding code is completely standard JS and would run just fine (without special optimization) in a non-asm.js engine."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Obviously, the nature of restrictions that make asm.js code so optimizable reduces the possible uses for such code significantly. asm.js won't necessarily be a general optimization set for any given JS program. Instead, it's intended to provide an optimized way of handling specialized tasks such as intensive math operations (e.g., those used in graphics processing for games)."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "review" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#review" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Review")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The first four chapters of this book are based on the premise that async coding patterns give you the ability to write more performant code, which is generally a very important improvement. But async behavior only gets you so far, because it's still fundamentally bound to a single event loop thread."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "So in this chapter we've covered several program-level mechanisms for improving performance even further."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Web Workers let you run a JS file (aka program) in a separate thread using async events to message between the threads. They're wonderful for offloading long-running or resource-intensive tasks to a different thread, leaving the main UI thread more responsive."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "SIMD proposes to map CPU-level parallel math operations to JavaScript APIs for high-performance data-parallel operations, like number processing on large data sets."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Finally, asm.js describes a small subset of JavaScript that avoids the hard-to-optimize parts of JS (like garbage collection and coercion) and lets the JS engine recognize and run such code through aggressive optimizations. asm.js could be hand authored, but that's extremely tedious and error prone, akin to hand authoring assembly language (hence the name). Instead, the main intent is that asm.js would be a good target for cross-compilation from other highly optimized program languages -- for example, Emscripten (https://github.com/kripken/emscripten/wiki) transpiling C/C++ to JavaScript."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "While not covered explicitly in this chapter, there are even more radical ideas under very early discussion for JavaScript, including approximations of direct threaded functionality (not just hidden behind data structure APIs). Whether that happens explicitly, or we just see more parallelism creep into JS behind the scenes, the future of more optimized program-level performance in JS looks really "
        ),
        _c("em", [_vm._v("promising")]),
        _vm._v(".")
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}