{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/scope_and_closures/ch1.md?vue&type=template&id=30a0df02&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/scope_and_closures/ch1.md","mtime":1572780326881},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}