{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/this_and_object_prototypes/ch4.md?vue&type=template&id=6cd762bf&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/this_and_object_prototypes/ch4.md","mtime":1572780326887},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "you-don-t-know-js-this-object-prototypes" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#you-don-t-know-js-this-object-prototypes" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" You Don't Know JS: "),
        _c("em", [_vm._v("this")]),
        _vm._v(" & Object Prototypes")
      ]),
      _vm._v(" "),
      _c("h1", { attrs: { id: "chapter-4-mixing-up-class-objects" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#chapter-4-mixing-up-class-objects" }
          },
          [_vm._v("#")]
        ),
        _vm._v(' Chapter 4: Mixing (Up) "Class" Objects')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Following our exploration of objects from the previous chapter, it\'s natural that we now turn our attention to "object oriented (OO) programming", with "classes". We\'ll first look at "class orientation" as a design pattern, before examining the mechanics of "classes": "instantiation", "inheritance" and "(relative) polymorphism".'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We'll see that these concepts don't really map very naturally to the object mechanism in JS, and the lengths (mixins, etc.) many JavaScript developers go to overcome such challenges."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          ' This chapter spends quite a bit of time (the first half!) on heavy "objected oriented programming" theory. We eventually relate these ideas to real concrete JavaScript code in the second half, when we talk about "Mixins". But there\'s a lot of concept and pseudo-code to wade through first, so don\'t get lost -- just stick with it!'
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "class-theory" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#class-theory" } },
          [_vm._v("#")]
        ),
        _vm._v(" Class Theory")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Class/Inheritance" describes a certain form of code organization and architecture -- a way of modeling real world problem domains in our software.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'OO or class oriented programming stresses that data intrinsically has associated behavior (of course, different depending on the type and nature of the data!) that operates on it, so proper design is to package up (aka, encapsulate) the data and the behavior together. This is sometimes called "data structures" in formal computer science.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'For example, a series of characters that represents a word or phrase is usually called a "string". The characters are the data. But you almost never just care about the data, you usually want to '
        ),
        _c("em", [_vm._v("do things")]),
        _vm._v(" with the data, so the behaviors that can apply "),
        _c("em", [_vm._v("to")]),
        _vm._v(
          " that data (calculating its length, appending data, searching, etc.) are all designed as methods of a "
        ),
        _c("code", [_vm._v("String")]),
        _vm._v(" class.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Any given string is just an instance of this class, which means that it's a neatly collected packaging of both the character data and the functionality we can perform on it."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Classes also imply a way of "),
        _c("em", [_vm._v("classifying")]),
        _vm._v(
          " a certain data structure. The way we do this is to think about any given structure as a specific variation of a more general base definition."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Let's explore this classification process by looking at a commonly cited example. A "
        ),
        _c("em", [_vm._v("car")]),
        _vm._v(
          ' can be described as a specific implementation of a more general "class" of thing, called a '
        ),
        _c("em", [_vm._v("vehicle")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We model this relationship in software with classes by defining a "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" class and a "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" class.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The definition of "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          " might include things like propulsion (engines, etc.), the ability to carry people, etc., which would all be the behaviors. What we define in "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          ' is all the stuff that is common to all (or most of) the different types of vehicles (the "planes, trains, and automobiles").'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'It might not make sense in our software to re-define the basic essence of "ability to carry people" over and over again for each different type of vehicle. Instead, we define that capability once in '
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(", and then when we define "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          ', we simply indicate that it "inherits" (or "extends") the base definition from '
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(". The definition of "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" is said to specialize the general "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" definition.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("While "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " collectively define the behavior by way of methods, the data in an instance would be things like the unique VIN of a specific car, etc."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v("And thus, classes, inheritance, and instantiation emerge.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Another key concept with classes is "polymorphism", which describes the idea that a general behavior from a parent class can be overridden in a child class to give it more specifics. In fact, relative polymorphism lets us reference the base behavior from the overridden behavior.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Class theory strongly suggests that a parent class and a child class share the same method name for a certain behavior, so that the child overrides the parent (differentially). As we'll see later, doing so in your JavaScript code is opting into frustration and code brittleness."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "class-design-pattern" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-design-pattern" }
          },
          [_vm._v("#")]
        ),
        _vm._v(' "Class" Design Pattern')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'You may never have thought about classes as a "design pattern", since it\'s most common to see discussion of popular "OO Design Patterns", like "Iterator", "Observer", "Factory", "Singleton", etc. As presented this way, it\'s almost an assumption that OO classes are the lower-level mechanics by which we implement all (higher level) design patterns, as if OO is a given foundation for '
        ),
        _c("em", [_vm._v("all")]),
        _vm._v(" (proper) code.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Depending on your level of formal education in programming, you may have heard of "procedural programming" as a way of describing code which only consists of procedures (aka, functions) calling other functions, without any higher abstractions. You may have been taught that classes were the '
        ),
        _c("em", [_vm._v("proper")]),
        _vm._v(
          ' way to transform procedural-style "spaghetti code" into well-formed, well-organized code.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Of course, if you have experience with "functional programming" (Monads, etc.), you know very well that classes are just one of several common design patterns. But for others, this may be the first time you\'ve asked yourself if classes really are a fundamental foundation for code, or if they are an optional abstraction on top of code.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Some languages (like Java) don't give you the choice, so it's not very "
        ),
        _c("em", [_vm._v("optional")]),
        _vm._v(
          " at all -- everything's a class. Other languages like C/C++ or PHP give you both procedural and class-oriented syntaxes, and it's left more to the developer's choice which style or mixture of styles is appropriate."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "javascript-classes" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#javascript-classes" }
          },
          [_vm._v("#")]
        ),
        _vm._v(' JavaScript "Classes"')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Where does JavaScript fall in this regard? JS has had "),
        _c("em", [_vm._v("some")]),
        _vm._v(" class-like syntactic elements (like "),
        _c("code", [_vm._v("new")]),
        _vm._v(" and "),
        _c("code", [_vm._v("instanceof")]),
        _vm._v(
          ") for quite awhile, and more recently in ES6, some additions, like the "
        ),
        _c("code", [_vm._v("class")]),
        _vm._v(" keyword (see Appendix A).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("But does that mean JavaScript actually "),
        _c("em", [_vm._v("has")]),
        _vm._v(" classes? Plain and simple: "),
        _c("strong", [_vm._v("No.")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Since classes are a design pattern, you "),
        _c("em", [_vm._v("can")]),
        _vm._v(
          ", with quite a bit of effort (as we'll see throughout the rest of this chapter), implement approximations for much of classical class functionality. JS tries to satisfy the extremely pervasive "
        ),
        _c("em", [_vm._v("desire")]),
        _vm._v(
          " to design with classes by providing seemingly class-like syntax."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "While we may have a syntax that looks like classes, it's as if JavaScript mechanics are fighting against you using the "
        ),
        _c("em", [_vm._v("class design pattern")]),
        _vm._v(
          ', because behind the curtain, the mechanisms that you build on are operating quite differently. Syntactic sugar and (extremely widely used) JS "Class" libraries go a long way toward hiding this reality from you, but sooner or later you will face the fact that the '
        ),
        _c("em", [_vm._v("classes")]),
        _vm._v(
          ' you have in other languages are not like the "classes" you\'re faking in JS.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "What this boils down to is that classes are an optional pattern in software design, and you have the choice to use them in JavaScript or not. Since many developers have a strong affinity to class oriented software design, we'll spend the rest of this chapter exploring what it takes to maintain the illusion of classes with what JS provides, and the pain points we experience."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "class-mechanics" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#class-mechanics" } },
          [_vm._v("#")]
        ),
        _vm._v(" Class Mechanics")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'In many class-oriented languages, the "standard library" provides a "stack" data structure (push, pop, etc.) as a '
        ),
        _c("code", [_vm._v("Stack")]),
        _vm._v(
          ' class. This class would have an internal set of variables that stores the data, and it would have a set of publicly accessible behaviors ("methods") provided by the class, which gives your code the ability to interact with the (hidden) data (adding & removing data, etc.).'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("But in such languages, you don't really operate directly on "),
        _c("code", [_vm._v("Stack")]),
        _vm._v(" (unless making a "),
        _c("strong", [_vm._v("Static")]),
        _vm._v(
          " class member reference, which is outside the scope of our discussion). The "
        ),
        _c("code", [_vm._v("Stack")]),
        _vm._v(" class is merely an abstract explanation of what "),
        _c("em", [_vm._v("any")]),
        _vm._v(' "stack" should do, but it\'s not itself '),
        _c("em", [_vm._v("a")]),
        _vm._v(' "stack". You must '),
        _c("strong", [_vm._v("instantiate")]),
        _vm._v(" the "),
        _c("code", [_vm._v("Stack")]),
        _vm._v(" class before you have a concrete data structure "),
        _c("em", [_vm._v("thing")]),
        _vm._v(" to operate against.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "building" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#building" } },
          [_vm._v("#")]
        ),
        _vm._v(" Building")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'The traditional metaphor for "class" and "instance" based thinking comes from a building construction.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "An architect plans out all the characteristics of a building: how wide, how tall, how many windows and in what locations, even what type of material to use for the walls and roof. She doesn't necessarily care, at this point, "
        ),
        _c("em", [_vm._v("where")]),
        _vm._v(" the building will be built, nor does she care "),
        _c("em", [_vm._v("how many")]),
        _vm._v(" copies of that building will be built.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "She also doesn't care very much about the contents of the building -- the furniture, wall paper, ceiling fans, etc. -- only what type of structure they will be contained by."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The architectural blue-prints she produces are only "),
        _c("em", [_vm._v("plans")]),
        _vm._v(
          " for a building. They don't actually constitute a building we can walk into and sit down. We need a builder for that task. A builder will take those plans and follow them, exactly, as he "
        ),
        _c("em", [_vm._v("builds")]),
        _vm._v(" the building. In a very real sense, he is "),
        _c("em", [_vm._v("copying")]),
        _vm._v(
          " the intended characteristics from the plans to the physical building."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Once complete, the building is a physical instantiation of the blue-print plans, hopefully an essentially perfect "
        ),
        _c("em", [_vm._v("copy")]),
        _vm._v(
          ". And then the builder can move to the open lot next door and do it all over again, creating yet another "
        ),
        _c("em", [_vm._v("copy")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The relationship between building and blue-print is indirect. You can examine a blue-print to understand how the building was structured, for any parts where direct inspection of the building itself was insufficient. But if you want to open a door, you have to go to the building itself -- the blue-print merely has lines drawn on a page that "
        ),
        _c("em", [_vm._v("represent")]),
        _vm._v(" where the door should be.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("A class is a blue-print. To actually "),
        _c("em", [_vm._v("get")]),
        _vm._v(
          ' an object we can interact with, we must build (aka, "instantiate") something from the class. The end result of such "construction" is an object, typically called an "instance", which we can directly call methods on and access any public data properties from, as necessary.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("This object is a "), _c("em", [_vm._v("copy")])]),
        _vm._v(" of all the characteristics described by the class.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "You likely wouldn't expect to walk into a building and find, framed and hanging on the wall, a copy of the blue-prints used to plan the building, though the blue-prints are probably on file with a public records office. Similarly, you don't generally use an object instance to directly access and manipulate its class, but it is usually possible to at least determine "
        ),
        _c("em", [_vm._v("which class")]),
        _vm._v(" an object instance comes from.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's more useful to consider the direct relationship of a class to an object instance, rather than any indirect relationship between an object instance and the class it came from. "
        ),
        _c("strong", [
          _vm._v(
            "A class is instantiated into object form by a copy operation."
          )
        ])
      ]),
      _vm._v(" "),
      _c("img", { attrs: { src: "fig1.png" } }),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "As you can see, the arrows move from left to right, and from top to bottom, which indicates the copy operations that occur, both conceptually and physically."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "constructor" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#constructor" } },
          [_vm._v("#")]
        ),
        _vm._v(" Constructor")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Instances of classes are constructed by a special method of the class, usually of the same name as the class, called a "
        ),
        _c("em", [_vm._v("constructor")]),
        _vm._v(
          ". This method's explicit job is to initialize any information (state) the instance will need."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For example, consider this loose pseudo-code (invented syntax) for classes:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("CoolGuy")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tspecialTrick "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" nothing\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("CoolGuy")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("trick")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tspecialTrick "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" trick\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("showOff")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Here\'s my trick: "')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" specialTrick "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("To "),
        _c("em", [_vm._v("make")]),
        _vm._v(" a "),
        _c("code", [_vm._v("CoolGuy")]),
        _vm._v(" instance, we would call the class constructor:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _vm._v("Joe "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("CoolGuy")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"jumping rope"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\nJoe"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("showOff")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Here's my trick: jumping rope")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Notice that the "),
        _c("code", [_vm._v("CoolGuy")]),
        _vm._v(" class has a constructor "),
        _c("code", [_vm._v("CoolGuy()")]),
        _vm._v(", which is actually what we call when we say "),
        _c("code", [_vm._v("new CoolGuy(..)")]),
        _vm._v(
          ". We get an object back (an instance of our class) from the constructor, and we can call the method "
        ),
        _c("code", [_vm._v("showOff()")]),
        _vm._v(", which prints out that particular "),
        _c("code", [_vm._v("CoolGuy")]),
        _vm._v("s special trick.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [
          _vm._v("Obviously, jumping rope makes Joe a pretty cool guy.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("The constructor of a class "),
        _c("em", [_vm._v("belongs")]),
        _vm._v(
          " to the class, almost universally with the same name as the class. Also, constructors pretty much always need to be called with "
        ),
        _c("code", [_vm._v("new")]),
        _vm._v(" to let the language engine know you want to construct a "),
        _c("em", [_vm._v("new")]),
        _vm._v(" class instance.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "class-inheritance" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#class-inheritance" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Class Inheritance")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In class-oriented languages, not only can you define a class which can be instantiated itself, but you can define another class that "
        ),
        _c("strong", [_vm._v("inherits")]),
        _vm._v(" from the first class.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'The second class is often said to be a "child class" whereas the first is the "parent class". These terms obviously come from the metaphor of parents and children, though the metaphors here are a bit stretched, as you\'ll see shortly.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "When a parent has a biological child, the genetic characteristics of the parent are copied into the child. Obviously, in most biological reproduction systems, there are two parents who co-equally contribute genes to the mix. But for the purposes of the metaphor, we'll assume just one parent."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Once the child exists, he or she is separate from the parent. The child was heavily influenced by the inheritance from his or her parent, but is unique and distinct. If a child ends up with red hair, that doesn't mean the parent's hair "
        ),
        _c("em", [_vm._v("was")]),
        _vm._v(" or automatically "),
        _c("em", [_vm._v("becomes")]),
        _vm._v(" red.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In a similar way, once a child class is defined, it's separate and distinct from the parent class. The child class contains an initial copy of the behavior from the parent, but can then override any inherited behavior and even define new behavior."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It's important to remember that we're talking about parent and child "
        ),
        _c("strong", [_vm._v("classes")]),
        _vm._v(
          ", which aren't physical things. This is where the metaphor of parent and child gets a little confusing, because we actually should say that a parent class is like a parent's DNA and a child class is like a child's DNA. We have to make (aka \"instantiate\") a person out of each set of DNA to actually have a physical person to have a conversation with."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Let's set aside biological parents and children, and look at inheritance through a slightly different lens: different types of vehicles. That's one of the most canonical (and often groan-worthy) metaphors to understand inheritance."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Let's revisit the "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " discussion from earlier in this chapter. Consider this loose pseudo-code (invented syntax) for inherited classes:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Vehicle")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tengines "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ignition")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Turning on my engine."')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ignition")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Steering and moving forward!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Car")
            ]),
            _vm._v(" inherits Vehicle "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\twheels "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tinherited"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Rolling on all "')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" wheels"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('" wheels!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("class")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("SpeedBoat")
            ]),
            _vm._v(" inherits Vehicle "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tengines "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ignition")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Turning on my "')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" engines"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('" engines."')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("pilot")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tinherited"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("output")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Speeding through the water with ease!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " For clarity and brevity, constructors for these classes have been omitted."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("We define the "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          " class to assume an engine, a way to turn on the ignition, and a way to drive around. But you wouldn't ever manufacture just a generic \"vehicle\", so it's really just an abstract concept at this point."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("So then we define two specific kinds of vehicle: "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" and "),
        _c("code", [_vm._v("SpeedBoat")]),
        _vm._v(". They each inherit the general characteristics of "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          ", but then they specialize the characteristics appropriately for each kind. A car needs 4 wheels, and a speed boat needs 2 engines, which means it needs extra attention to turn on the ignition of both engines."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "polymorphism" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#polymorphism" } },
          [_vm._v("#")]
        ),
        _vm._v(" Polymorphism")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Car")]),
        _vm._v(" defines its own "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(
          " method, which overrides the method of the same name it inherited from "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(". But then, "),
        _c("code", [_vm._v("Car")]),
        _vm._v("s "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" method calls "),
        _c("code", [_vm._v("inherited:drive()")]),
        _vm._v(", which indicates that "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" can reference the original pre-overridden "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" it inherited. "),
        _c("code", [_vm._v("SpeedBoat")]),
        _vm._v("s "),
        _c("code", [_vm._v("pilot()")]),
        _vm._v(" method also makes a reference to its inherited copy of "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'This technique is called "polymorphism", or "virtual polymorphism". More specifically to our current point, we\'ll call it "relative polymorphism".'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Polymorphism is a much broader topic than we will exhaust here, but our current "relative" semantics refers to one particular aspect: the idea that any method can reference another method (of the same or different name) at a higher level of the inheritance hierarchy. We say "relative" because we don\'t absolutely define which inheritance level (aka, class) we want to access, but rather relatively reference it by essentially saying "look one level up".'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("In many languages, the keyword "),
        _c("code", [_vm._v("super")]),
        _vm._v(" is used, in place of this example's "),
        _c("code", [_vm._v("inherited:")]),
        _vm._v(
          ', which leans on the idea that a "super class" is the parent/ancestor of the current class.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Another aspect of polymorphism is that a method name can have multiple definitions at different levels of the inheritance chain, and these definitions are automatically selected as appropriate when resolving which methods are being called."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "We see two occurrences of that behavior in our example above: "
        ),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" is defined in both "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(", and "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" is defined in both "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("SpeedBoat")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " Another thing that traditional class-oriented languages give you via "
        ),
        _c("code", [_vm._v("super")]),
        _vm._v(
          " is a direct way for the constructor of a child class to reference the constructor of its parent class. This is largely true because with real classes, the constructor belongs to the class. However, in JS, it's the reverse -- it's actually more appropriate to think of the \"class\" belonging to the constructor (the "
        ),
        _c("code", [_vm._v("Foo.prototype...")]),
        _vm._v(
          " type references). Since in JS the relationship between child and parent exists only between the two "
        ),
        _c("code", [_vm._v(".prototype")]),
        _vm._v(
          " objects of the respective constructors, the constructors themselves are not directly related, and thus there's no simple way to relatively reference one from the other (see Appendix A for ES6 "
        ),
        _c("code", [_vm._v("class")]),
        _vm._v(' which "solves" this with '),
        _c("code", [_vm._v("super")]),
        _vm._v(").")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "An interesting implication of polymorphism can be seen specifically with "
        ),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(". Inside "),
        _c("code", [_vm._v("pilot()")]),
        _vm._v(
          ", a relative-polymorphic reference is made to (the inherited) "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v("s version of "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(". But that "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" references an "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" method just by name (no relative reference).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Which version of "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" will the language engine use, the one from "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" or the one from "),
        _c("code", [_vm._v("SpeedBoat")]),
        _vm._v("? "),
        _c("strong", [
          _vm._v("It uses the "),
          _c("code", [_vm._v("SpeedBoat")]),
          _vm._v(" version of "),
          _c("code", [_vm._v("ignition()")]),
          _vm._v(".")
        ]),
        _vm._v(" If you "),
        _c("em", [_vm._v("were")]),
        _vm._v(" to instantiate "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" class itself, and then call its "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(", the language engine would instead just use "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v("s "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" method definition.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Put another way, the definition for the method "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" "),
        _c("em", [_vm._v("polymorphs")]),
        _vm._v(
          " (changes) depending on which class (level of inheritance) you are referencing an instance of."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "This may seem like overly deep academic detail. But understanding these details is necessary to properly contrast similar (but distinct) behaviors in JavaScript's "
        ),
        _c("code", [_vm._v("[[Prototype]]")]),
        _vm._v(" mechanism.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("When classes are inherited, there is a way "),
        _c("strong", [_vm._v("for the classes themselves")]),
        _vm._v(" (not the object instances created from them!) to "),
        _c("em", [_vm._v("relatively")]),
        _vm._v(
          " reference the class inherited from, and this relative reference is usually called "
        ),
        _c("code", [_vm._v("super")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Remember this figure from earlier:")]),
      _vm._v(" "),
      _c("img", { attrs: { src: "fig1.png" } }),
      _vm._v(" "),
      _c("p", [
        _vm._v("Notice how for both instantiation ("),
        _c("code", [_vm._v("a1")]),
        _vm._v(", "),
        _c("code", [_vm._v("a2")]),
        _vm._v(", "),
        _c("code", [_vm._v("b1")]),
        _vm._v(", and "),
        _c("code", [_vm._v("b2")]),
        _vm._v(") "),
        _c("em", [_vm._v("and")]),
        _vm._v(" inheritance ("),
        _c("code", [_vm._v("Bar")]),
        _vm._v("), the arrows indicate a copy operation.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Conceptually, it would seem a child class "),
        _c("code", [_vm._v("Bar")]),
        _vm._v(" can access  behavior in its parent class "),
        _c("code", [_vm._v("Foo")]),
        _vm._v(" using a relative polymorphic reference (aka, "),
        _c("code", [_vm._v("super")]),
        _vm._v(
          '). However, in reality, the child class is merely given a copy of the inherited behavior from its parent class. If the child "overrides" a method it inherits, both the original and overridden versions of the method are actually maintained, so that they are both accessible.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Don't let polymorphism confuse you into thinking a child class is linked to its parent class. A child class instead gets a copy of what it needs from the parent class. "
        ),
        _c("strong", [_vm._v("Class inheritance implies copies.")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "multiple-inheritance" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#multiple-inheritance" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Multiple Inheritance")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Recall our earlier discussion of parent(s) and children and DNA? We said that the metaphor was a bit weird because biologically most offspring come from two parents. If a class could inherit from two other classes, it would more closely fit the parent/child metaphor."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Some class-oriented languages allow you to specify more than one "parent" class to "inherit" from. Multiple-inheritance means that each parent class definition is copied into the child class.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "On the surface, this seems like a powerful addition to class-orientation, giving us the ability to compose more functionality together. However, there are certainly some complicating questions that arise. If both parent classes provide a method called "
        ),
        _c("code", [_vm._v("drive()")]),
        _vm._v(", which version would a "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(
          " reference in the child resolve to? Would you always have to manually specify which parent's "
        ),
        _c("code", [_vm._v("drive()")]),
        _vm._v(
          " you meant, thus losing some of the gracefulness of polymorphic inheritance?"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'There\'s another variation, the so called "Diamond Problem", which refers to the scenario where a child class "D" inherits from two parent classes ("B" and "C"), and each of those in turn inherits from a common "A" parent. If "A" provides a method '
        ),
        _c("code", [_vm._v("drive()")]),
        _vm._v(
          ', and both "B" and "C" override (polymorph) that method, when '
        ),
        _c("code", [_vm._v("D")]),
        _vm._v(" references "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(", which version should it use ("),
        _c("code", [_vm._v("B:drive()")]),
        _vm._v(" or "),
        _c("code", [_vm._v("C:drive()")]),
        _vm._v(")?")
      ]),
      _vm._v(" "),
      _c("img", { attrs: { src: "fig2.png" } }),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "These complications go even much deeper than this quick glance. We address them here only so we can contrast to how JavaScript's mechanisms work."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'JavaScript is simpler: it does not provide a native mechanism for "multiple inheritance". Many see this as a good thing, because the complexity savings more than make up for the "reduced" functionality. But this doesn\'t stop developers from trying to fake it in various ways, as we\'ll see next.'
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "mixins" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#mixins" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Mixins")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("JavaScript's object mechanism does not "),
        _c("em", [_vm._v("automatically")]),
        _vm._v(
          ' perform copy behavior when you "inherit" or "instantiate". Plainly, there are no "classes" in JavaScript to instantiate, only objects. And objects don\'t get copied to other objects, they get '
        ),
        _c("em", [_vm._v("linked together")]),
        _vm._v(" (more on that in Chapter 5).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Since observed class behaviors in other languages imply copies, let's examine how JS developers "
        ),
        _c("strong", [_vm._v("fake")]),
        _vm._v(" the "),
        _c("em", [_vm._v("missing")]),
        _vm._v(
          ' copy behavior of classes in JavaScript: mixins. We\'ll look at two types of "mixin": '
        ),
        _c("strong", [_vm._v("explicit")]),
        _vm._v(" and "),
        _c("strong", [_vm._v("implicit")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "explicit-mixins" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#explicit-mixins" } },
          [_vm._v("#")]
        ),
        _vm._v(" Explicit Mixins")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Let's again revisit our "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " example from before. Since JavaScript will not automatically copy behavior from "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" to "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          ", we can instead create a utility that manually copies. Such a utility is often called "
        ),
        _c("code", [_vm._v("extend(..)")]),
        _vm._v(" by many libraries/frameworks, but we will call it "),
        _c("code", [_vm._v("mixin(..)")]),
        _vm._v(" here for illustrative purposes.")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// vastly simplified `mixin(..)` example:")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("sourceObj"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v(" targetObj")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" key "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// only copy if not already present")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("if")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("!")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("key "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" targetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t\ttargetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" targetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Vehicle "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tengines"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("ignition")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Turning on my engine."')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("drive")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ignition")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Steering and moving forward!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Car "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" Vehicle"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\twheels"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("drive")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\tVehicle"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Rolling on all "')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("wheels "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('" wheels!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          " Subtly but importantly, we're not dealing with classes anymore, because there are no classes in JavaScript. "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " are just objects that we make copies from and to, respectively."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Car")]),
        _vm._v(" now has a copy of the properties and functions from "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          ". Technically, functions are not actually duplicated, but rather "
        ),
        _c("em", [_vm._v("references")]),
        _vm._v(" to the functions are copied. So, "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" now has a property called "),
        _c("code", [_vm._v("ignition")]),
        _vm._v(", which is a copied reference to the "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(" function, as well as a property called "),
        _c("code", [_vm._v("engines")]),
        _vm._v(" with the copied value of "),
        _c("code", [_vm._v("1")]),
        _vm._v(" from "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("code", [_vm._v("Car")]),
        _vm._v(" "),
        _c("em", [_vm._v("already")]),
        _vm._v(" had a "),
        _c("code", [_vm._v("drive")]),
        _vm._v(
          " property (function), so that property reference was not overridden (see the "
        ),
        _c("code", [_vm._v("if")]),
        _vm._v(" statement in "),
        _c("code", [_vm._v("mixin(..)")]),
        _vm._v(" above).")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "polymorphism-revisited" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#polymorphism-revisited" }
          },
          [_vm._v("#")]
        ),
        _vm._v(' "Polymorphism" Revisited')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Let's examine this statement: "),
        _c("code", [_vm._v("Vehicle.drive.call( this )")]),
        _vm._v(
          '. This is what I call "explicit pseudo-polymorphism". Recall in our previous pseudo-code this line was '
        ),
        _c("code", [_vm._v("inherited:drive()")]),
        _vm._v(', which we called "relative polymorphism".')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "JavaScript does not have (prior to ES6; see Appendix A) a facility for relative polymorphism. So, "
        ),
        _c("strong", [
          _vm._v("because both "),
          _c("code", [_vm._v("Car")]),
          _vm._v(" and "),
          _c("code", [_vm._v("Vehicle")]),
          _vm._v(" had a function of the same name: "),
          _c("code", [_vm._v("drive()")])
        ]),
        _vm._v(
          ", to distinguish a call to one or the other, we must make an absolute (not relative) reference. We explicitly specify the "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" object by name, and call the "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" function on it.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("But if we said "),
        _c("code", [_vm._v("Vehicle.drive()")]),
        _vm._v(", the "),
        _c("code", [_vm._v("this")]),
        _vm._v(" binding for that function call would be the "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" object instead of the "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " object (see Chapter 2), which is not what we want. So, instead we use "
        ),
        _c("code", [_vm._v(".call( this )")]),
        _vm._v(" (Chapter 2) to ensure that "),
        _c("code", [_vm._v("drive()")]),
        _vm._v(" is executed in the context of the "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" object.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(" If the function name identifier for "),
        _c("code", [_vm._v("Car.drive()")]),
        _vm._v(' hadn\'t overlapped with (aka, "shadowed"; see Chapter 5) '),
        _c("code", [_vm._v("Vehicle.drive()")]),
        _vm._v(
          ', we wouldn\'t have been exercising "method polymorphism". So, a reference to '
        ),
        _c("code", [_vm._v("Vehicle.drive()")]),
        _vm._v(" would have been copied over by the "),
        _c("code", [_vm._v("mixin(..)")]),
        _vm._v(" call, and we could have accessed directly with "),
        _c("code", [_vm._v("this.drive()")]),
        _vm._v(". The chosen identifier overlap "),
        _c("strong", [_vm._v("shadowing")]),
        _vm._v(" is "),
        _c("em", [_vm._v("why")]),
        _vm._v(" we have to use the more complex "),
        _c("em", [_vm._v("explicit pseudo-polymorphism")]),
        _vm._v(" approach.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In class-oriented languages, which have relative polymorphism, the linkage between "
        ),
        _c("code", [_vm._v("Car")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          " is established once, at the top of the class definition, which makes for only one place to maintain such relationships."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "But because of JavaScript's peculiarities, explicit pseudo-polymorphism (because of shadowing!) creates brittle manual/explicit linkage "
        ),
        _c("strong", [
          _vm._v(
            "in every single function where you need such a (pseudo-)polymorphic reference"
          )
        ]),
        _vm._v(
          '. This can significantly increase the maintenance cost. Moreover, while explicit pseudo-polymorphism can emulate the behavior of "multiple inheritance", it only increases the complexity and brittleness.'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The result of such approaches is usually more complex, harder-to-read, "
        ),
        _c("em", [_vm._v("and")]),
        _vm._v(" harder-to-maintain code. "),
        _c("strong", [
          _vm._v(
            "Explicit pseudo-polymorphism should be avoided wherever possible"
          )
        ]),
        _vm._v(", because the cost outweighs the benefit in most respects.")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "mixing-copies" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#mixing-copies" } },
          [_vm._v("#")]
        ),
        _vm._v(" Mixing Copies")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Recall the "),
        _c("code", [_vm._v("mixin(..)")]),
        _vm._v(" utility from above:")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// vastly simplified `mixin()` example:")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("sourceObj"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v(" targetObj")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" key "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// only copy if not already present")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("if")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("!")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("key "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" targetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t\ttargetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" targetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("Now, let's examine how "),
        _c("code", [_vm._v("mixin(..)")]),
        _vm._v(" works. It iterates over the properties of "),
        _c("code", [_vm._v("sourceObj")]),
        _vm._v(" ("),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          " in our example) and if there's no matching property of that name in "
        ),
        _c("code", [_vm._v("targetObj")]),
        _vm._v(" ("),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          " in our example), it makes a copy. Since we're making the copy after the initial object exists, we are careful to not copy over a target property."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("If we made the copies first, before specifying the "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" specific contents, we could omit this check against "),
        _c("code", [_vm._v("targetObj")]),
        _vm._v(
          ", but that's a little more clunky and less efficient, so it's generally less preferred:"
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// alternate mixin, less "safe" to overwrites')
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token parameter" } }, [
              _vm._v("sourceObj"),
              _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
                _vm._v(",")
              ]),
              _vm._v(" targetObj")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" key "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\ttargetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" sourceObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("[")
            ]),
            _vm._v("key"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("]")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" targetObj"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Vehicle "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ...")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// first, create an empty object with")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Vehicle's stuff copied in")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Car "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" Vehicle"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// now copy the intended contents into Car")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("mixin")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\twheels"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v("\n\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("drive")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// ...")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(",")
            ]),
            _vm._v(" Car "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "Either approach, we have explicitly copied the non-overlapping contents of "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" into "),
        _c("code", [_vm._v("Car")]),
        _vm._v(
          '. The name "mixin" comes from an alternate way of explaining the task: '
        ),
        _c("code", [_vm._v("Car")]),
        _vm._v(" has "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v("s contents "),
        _c("strong", [_vm._v("mixed-in")]),
        _vm._v(
          ", just like you mix in chocolate chips into your favorite cookie dough."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("As a result of the copy operation, "),
        _c("code", [_vm._v("Car")]),
        _vm._v(" will operate somewhat separately from "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(". If you add a property onto "),
        _c("code", [_vm._v("Car")]),
        _vm._v(", it will not affect "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(", and vice versa.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(
          ' A few minor details have been skimmed over here. There are still some subtle ways the two objects can "affect" each other even after copying, such as if they both share a reference to a common object (such as an array).'
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Since the two objects also share references to their common functions, that means that "
        ),
        _c("strong", [
          _vm._v(
            "even manual copying of functions (aka, mixins) from one object to another doesn't "
          ),
          _c("em", [_vm._v("actually emulate")]),
          _vm._v(
            " the real duplication from class to instance that occurs in class-oriented languages"
          )
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "JavaScript functions can't really be duplicated (in a standard, reliable way), so what you end up with instead is a "
        ),
        _c("strong", [_vm._v("duplicated reference")]),
        _vm._v(
          " to the same shared function object (functions are objects; see Chapter 3). If you modified one of the shared "
        ),
        _c("strong", [_vm._v("function objects")]),
        _vm._v(" (like "),
        _c("code", [_vm._v("ignition()")]),
        _vm._v(") by adding properties on top of it, for instance, both "),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(" and "),
        _c("code", [_vm._v("Car")]),
        _vm._v(' would be "affected" via the shared reference.')
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Explicit mixins are a fine mechanism in JavaScript. But they appear more powerful than they really are. Not much benefit is "
        ),
        _c("em", [_vm._v("actually")]),
        _vm._v(" derived from copying a property from one object to another, "),
        _c("strong", [
          _vm._v("as opposed to just defining the properties twice")
        ]),
        _vm._v(
          ", once on each object. And that's especially true given the function-object reference nuance we just mentioned."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If you explicitly mix-in two or more objects into your target object, you can "
        ),
        _c("strong", [_vm._v("partially emulate")]),
        _vm._v(
          ' the behavior of "multiple inheritance", but there\'s no direct way to handle collisions if the same method or property is being copied from more than one source. Some developers/libraries have come up with "late binding" techniques and other exotic work-arounds, but fundamentally these "tricks" are '
        ),
        _c("em", [_vm._v("usually")]),
        _vm._v(" more effort (and lesser performance!) than the pay-off.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Take care only to use explicit mixins where it actually helps make more readable code, and avoid the pattern if you find it making code that's harder to trace, or if you find it creates unnecessary or unwieldy dependencies between objects."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v("If it starts to get "),
          _c("em", [_vm._v("harder")]),
          _vm._v(" to properly use mixins than before you used them")
        ]),
        _vm._v(
          ", you should probably stop using mixins. In fact, if you have to use a complex library/utility to work out all these details, it might be a sign that you're going about it the harder way, perhaps unnecessarily. In Chapter 6, we'll try to distill a simpler way that accomplishes the desired outcomes without all the fuss."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "parasitic-inheritance" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#parasitic-inheritance" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Parasitic Inheritance")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'A variation on this explicit mixin pattern, which is both in some ways explicit and in other ways implicit, is called "parasitic inheritance", popularized mainly by Douglas Crockford.'
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Here's how it can work:")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// "Traditional JS Class" `Vehicle`')
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("Vehicle")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("engines "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Vehicle")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("ignition")]
            ),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Turning on my engine."')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Vehicle")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("prototype"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("drive")]
            ),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("ignition")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Steering and moving forward!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// "Parasitic Class" `Car`')
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("Car")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// first, `car` is a `Vehicle`")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" car "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Vehicle")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// now, let's modify our `car` to specialize it")
            ]),
            _vm._v("\n\tcar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("wheels "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("4")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// save a privileged reference to `Vehicle::drive()`")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" vehDrive "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" car"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("drive"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// override `Vehicle::drive()`")
            ]),
            _vm._v("\n\tcar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("drive")]
            ),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("vehDrive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\tconsole"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("log")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Rolling on all "')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("wheels "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('" wheels!"')
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\n\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("return")
            ]),
            _vm._v(" car"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" myCar "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("new")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("Car")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\nmyCar"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("drive")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Turning on my engine.")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Steering and moving forward!")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// Rolling on all 4 wheels!")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v(
          "As you can see, we initially make a copy of the definition from the "
        ),
        _c("code", [_vm._v("Vehicle")]),
        _vm._v(
          ' "parent class" (object), then mixin our "child class" (object) definition (preserving privileged parent-class references as needed), and pass off this composed object '
        ),
        _c("code", [_vm._v("car")]),
        _vm._v(" as our child instance.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Note:")]),
        _vm._v(" when we call "),
        _c("code", [_vm._v("new Car()")]),
        _vm._v(", a new object is created and referenced by "),
        _c("code", [_vm._v("Car")]),
        _vm._v("s "),
        _c("code", [_vm._v("this")]),
        _vm._v(
          " reference (see Chapter 2). But since we don't use that object, and instead return our own "
        ),
        _c("code", [_vm._v("car")]),
        _vm._v(" object, the initially created object is just discarded. So, "),
        _c("code", [_vm._v("Car()")]),
        _vm._v(" could be called without the "),
        _c("code", [_vm._v("new")]),
        _vm._v(
          " keyword, and the functionality above would be identical, but without the wasted object creation/garbage-collection."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "implicit-mixins" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#implicit-mixins" } },
          [_vm._v("#")]
        ),
        _vm._v(" Implicit Mixins")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Implicit mixins are closely related to "),
        _c("em", [_vm._v("explicit pseudo-polymorphism")]),
        _vm._v(
          " as explained previously. As such, they come with the same caveats and warnings."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Consider this code:")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-js extra-class" }, [
        _c("pre", { pre: true, attrs: { class: "language-js" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Something "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("cool")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("greeting "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Hello World"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("count "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("count "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("?")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("count "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("+")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\nSomething"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("cool")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nSomething"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("greeting"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// "Hello World"')
            ]),
            _vm._v("\nSomething"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("count"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 1")
            ]),
            _vm._v("\n\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("var")
            ]),
            _vm._v(" Another "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t"),
            _c(
              "span",
              {
                pre: true,
                attrs: { class: "token function-variable function" }
              },
              [_vm._v("cool")]
            ),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("function")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n\t\t"),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// implicit mixin of `Something` to `Another`")
            ]),
            _vm._v("\n\t\tSomething"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("cool")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("call")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("this")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\t"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\n\nAnother"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("cool")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v("\nAnother"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("greeting"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v('// "Hello World"')
            ]),
            _vm._v("\nAnother"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("count"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 1 (not shared state with `Something`)")
            ]),
            _vm._v("\n")
          ])
        ])
      ]),
      _c("p", [
        _vm._v("With "),
        _c("code", [_vm._v("Something.cool.call( this )")]),
        _vm._v(
          ', which can happen either in a "constructor" call (most common) or in a method call (shown here), we essentially "borrow" the function '
        ),
        _c("code", [_vm._v("Something.cool()")]),
        _vm._v(" and call it in the context of "),
        _c("code", [_vm._v("Another")]),
        _vm._v(" (via its "),
        _c("code", [_vm._v("this")]),
        _vm._v(" binding; see Chapter 2) instead of "),
        _c("code", [_vm._v("Something")]),
        _vm._v(". The end result is that the assignments that "),
        _c("code", [_vm._v("Something.cool()")]),
        _vm._v(" makes are applied against the "),
        _c("code", [_vm._v("Another")]),
        _vm._v(" object rather than the "),
        _c("code", [_vm._v("Something")]),
        _vm._v(" object.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v('So, it is said that we "mixed in" '),
        _c("code", [_vm._v("Something")]),
        _vm._v("s behavior with (or into) "),
        _c("code", [_vm._v("Another")]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "While this sort of technique seems to take useful advantage of "
        ),
        _c("code", [_vm._v("this")]),
        _vm._v(" rebinding functionality, it is the brittle "),
        _c("code", [_vm._v("Something.cool.call( this )")]),
        _vm._v(
          " call, which cannot be made into a relative (and thus more flexible) reference, that you should "
        ),
        _c("strong", [_vm._v("heed with caution")]),
        _vm._v(". Generally, "),
        _c("strong", [_vm._v("avoid such constructs where possible")]),
        _vm._v(" to keep cleaner and more maintainable code.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "review-tl-dr" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#review-tl-dr" } },
          [_vm._v("#")]
        ),
        _vm._v(" Review (TL;DR)")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Classes are a design pattern. Many languages provide syntax which enables natural class-oriented software design. JS also has a similar syntax, but it behaves "
        ),
        _c("strong", [_vm._v("very differently")]),
        _vm._v(
          " from what you're used to with classes in those other languages."
        )
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Classes mean copies.")])]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "When traditional classes are instantiated, a copy of behavior from class to instance occurs. When classes are inherited, a copy of behavior from parent to child also occurs."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Polymorphism (having different functions at multiple levels of an inheritance chain with the same name) may seem like it implies a referential relative link from child back to parent, but it's still just a result of copy behavior."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("JavaScript "),
        _c("strong", [_vm._v("does not automatically")]),
        _vm._v(" create copies (as classes imply) between objects.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The mixin pattern (both explicit and implicit) is often used to "
        ),
        _c("em", [_vm._v("sort of")]),
        _vm._v(
          " emulate class copy behavior, but this usually leads to ugly and brittle syntax like explicit pseudo-polymorphism ("
        ),
        _c("code", [_vm._v("OtherObj.methodName.call(this, ...)")]),
        _vm._v(
          "), which often results in harder to understand and maintain code."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Explicit mixins are also not exactly the same as class "),
        _c("em", [_vm._v("copy")]),
        _vm._v(
          ", since objects (and functions!) only have shared references duplicated, not the objects/functions duplicated themselves. Not paying attention to such nuance is the source of a variety of gotchas."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In general, faking classes in JS often sets more landmines for future coding than solving present "
        ),
        _c("em", [_vm._v("real")]),
        _vm._v(" problems.")
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}