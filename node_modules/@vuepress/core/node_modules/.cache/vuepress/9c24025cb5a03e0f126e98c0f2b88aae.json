{"remainingRequest":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/this_and_object_prototypes/foreword.md?vue&type=template&id=533f7916&","dependencies":[{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/docs/this_and_object_prototypes/foreword.md","mtime":1572780326891},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/cache-loader/dist/cjs.js","mtime":1572692973025},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/vue-loader/lib/index.js","mtime":1572780898367},{"path":"/Users/grzegorzsajnog/Code/Netguru/You-Dont-Know-JS/node_modules/@vuepress/markdown-loader/index.js","mtime":1572692972056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ5b3UtZG9uLXQta25vdy1qcy10aGlzLW9iamVjdC1wcm90b3R5cGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN5b3UtZG9uLXQta25vdy1qcy10aGlzLW9iamVjdC1wcm90b3R5cGVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgWW91IERvbid0IEtub3cgSlM6ICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInRoaXMiKV0pLAogICAgICAgIF92bS5fdigiICYgT2JqZWN0IFByb3RvdHlwZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJmb3Jld29yZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZm9yZXdvcmQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZvcmV3b3JkIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hpbGUgcmVhZGluZyB0aGlzIGJvb2sgaW4gcHJlcGFyYXRpb24gZm9yIHdyaXRpbmcgdGhpcyBmb3Jld29yZCwgSSB3YXMgZm9yY2VkIHRvIHJlZmxlY3Qgb24gaG93IEkgbGVhcm5lZCBKYXZhU2NyaXB0IGFuZCBob3cgbXVjaCBpdCBoYXMgY2hhbmdlZCBvdmVyIHRoZSBsYXN0IDE1IHllYXJzIHRoYXQgSSBoYXZlIGJlZW4gcHJvZ3JhbW1pbmcgYW5kIGRldmVsb3Bpbmcgd2l0aCBpdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIEkgc3RhcnRlZCB1c2luZyBKYXZhU2NyaXB0IDE1IHllYXJzIGFnbywgdGhlIHByYWN0aWNlIG9mIHVzaW5nIG5vbi1IVE1MIHRlY2hub2xvZ2llcyBzdWNoIGFzIENTUyBhbmQgSlMgaW4geW91ciB3ZWIgcGFnZXMgd2FzIGNhbGxlZCBESFRNTCBvciBEeW5hbWljIEhUTUwuIEJhY2sgdGhlbiwgdGhlIHVzZWZ1bG5lc3Mgb2YgSmF2YVNjcmlwdCB2YXJpZWQgZ3JlYXRseSBhbmQgc2VlbWVkIHRvIGJlIHRpbHRlZCB0b3dhcmQgYWRkaW5nIGFuaW1hdGVkIHNub3dmbGFrZXMgdG8geW91ciB3ZWIgcGFnZXMgb3IgZHluYW1pYyBjbG9ja3MgdGhhdCB0b2xkIHRoZSB0aW1lIGluIHRoZSBzdGF0dXMgYmFyLiBTdWZmaWNlIGl0IHRvIHNheSwgSSBkaWRu4oCZdCByZWFsbHkgcGF5IG11Y2ggYXR0ZW50aW9uIHRvIEphdmFTY3JpcHQgaW4gdGhlIGVhcmx5IHBhcnQgb2YgbXkgY2FyZWVyIGJlY2F1c2Ugb2YgdGhlIG5vdmVsdHkgb2YgdGhlIGltcGxlbWVudGF0aW9ucyB0aGF0IEkgb2Z0ZW4gZm91bmQgb24gdGhlIEludGVybmV0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IHdhc27igJl0IHVudGlsIDIwMDUgdGhhdCBJIGZpcnN0IHJlZGlzY292ZXJlZCBKYXZhU2NyaXB0IGFzIGEgcmVhbCBwcm9ncmFtbWluZyBsYW5ndWFnZSB0aGF0IEkgbmVlZGVkIHRvIHBheSBjbG9zZXIgYXR0ZW50aW9uIHRvLiBBZnRlciBkaWdnaW5nIGludG8gdGhlIGZpcnN0IGJldGEgcmVsZWFzZSBvZiBHb29nbGUgTWFwcywgSSB3YXMgaG9va2VkIG9uIHRoZSBwb3RlbnRpYWwgaXQgaGFkLiBBdCB0aGUgdGltZSwgR29vZ2xlIE1hcHMgd2FzIGEgZmlyc3Qtb2YtaXRzLWtpbmQgYXBwbGljYXRpb24gLS0gaXQgYWxsb3dlZCB5b3UgdG8gbW92ZSBhIG1hcCBhcm91bmQgd2l0aCB5b3VyIG1vdXNlLCB6b29tIGluIGFuZCBvdXQsIGFuZCBtYWtlIHNlcnZlciByZXF1ZXN0cyB3aXRob3V0IHJlbG9hZGluZyB0aGUgcGFnZSAtLSBhbGwgd2l0aCBKYXZhU2NyaXB0LiBJdCBzZWVtZWQgbGlrZSBtYWdpYyEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIGFueXRoaW5nIHNlZW1zIGxpa2UgbWFnaWMsIGl0IGlzIHVzdWFsbHkgYSBnb29kIGluZGljYXRpb24geW91IGFyZSBhdCB0aGUgZGF3biBvZiBhIG5ldyB3YXkgb2YgZG9pbmcgdGhpbmdzLiBBbmQgYm95LCB3YXMgSSBub3Qgd3JvbmcgLS0gZmFzdC1mb3J3YXJkaW5nIHRvIHRvZGF5LCBJIHdvdWxkIHNheSB0aGF0IEphdmFTY3JpcHQgaXMgb25lIG9mIHRoZSBwcmltYXJ5IGxhbmd1YWdlcyBJIHVzZSBmb3IgYm90aCBjbGllbnQtIGFuZCBzZXJ2ZXItc2lkZSBwcm9ncmFtbWluZywgYW5kIEkgd291bGRu4oCZdCBoYXZlIGl0IGFueSBvdGhlciB3YXkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25lIG9mIG15IHJlZ3JldHMgYXMgSSBsb29rIG92ZXIgdGhlIHBhc3QgMTUgeWVhcnMgaXMgdGhhdCBJIGRpZG7igJl0IGdpdmUgSmF2YVNjcmlwdCBtb3JlIG9mIGEgY2hhbmNlIGJlZm9yZSAyMDA1LCBvciBtb3JlIGFjY3VyYXRlbHksIHRoYXQgSSBsYWNrZWQgdGhlIGZvcmVzaWdodCB0byBzZWUgSmF2YVNjcmlwdCBhcyBhIHRydWUgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UgdGhhdCBpcyBqdXN0IGFzIHVzZWZ1bCBhcyBDKyssIEMjLCBKYXZhLCBhbmQgbWFueSBvdGhlcnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIklmIEkgaGFkIHRoaXMgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiWW91IERvbuKAmXQgS25vdyBKUyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBzZXJpZXMgb2YgYm9va3MgYXQgdGhlIHN0YXJ0IG9mIG15IGNhcmVlciwgbXkgY2FyZWVyIGhpc3Rvcnkgd291bGQgbG9vayBtdWNoIGRpZmZlcmVudCB0aGFuIGl0IGRvZXMgdG9kYXkuIEFuZCB0aGF0IGlzIG9uZSBvZiB0aGUgdGhpbmdzIEkgbG92ZSBhYm91dCB0aGlzIHNlcmllczogaXQgZXhwbGFpbnMgSlMgYXQgYSBsZXZlbCB0aGF0IGJ1aWxkcyB5b3VyIHVuZGVyc3RhbmRpbmcgYXMgeW91IGdvIHRocm91Z2ggdGhlIHNlcmllcywgYnV0IGluIGEgZnVuIGFuZCBpbmZvcm1hdGl2ZSB3YXkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ0aGlzICYgT2JqZWN0IFByb3RvdHlwZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgYSB3b25kZXJmdWwgY29udGludWF0aW9uIHRvIHRoZSBzZXJpZXMuIEl0IGRvZXMgYSBncmVhdCBhbmQgbmF0dXJhbCBqb2Igb2YgYnVpbGRpbmcgb24gdGhlIHByaW9yIGJvb2ssIFNjb3BlICYgQ2xvc3VyZXMsIGFuZCBleHRlbmRpbmcgdGhhdCBrbm93bGVkZ2UgdG8gYSB2ZXJ5IGltcG9ydGFudCBwYXJ0IG9mIHRoZSBKUyBsYW5ndWFnZSwgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidGhpcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBrZXl3b3JkIGFuZCBwcm90b3R5cGVzLiBUaGVzZSB0d28gc2ltcGxlIHRoaW5ncyBhcmUgcGl2b3RhbCBmb3Igd2hhdCB5b3Ugd2lsbCBsZWFybiBpbiB0aGUgZnV0dXJlIGJvb2tzLCBiZWNhdXNlIHRoZXkgYXJlIGZvdW5kYXRpb25hbCB0byBkb2luZyByZWFsIHByb2dyYW1taW5nIHdpdGggSmF2YVNjcmlwdC4gVGhlIGNvbmNlcHQgb2YgaG93IHRvIGNyZWF0ZSBvYmplY3RzLCByZWxhdGUgdGhlbSwgYW5kIGV4dGVuZCB0aGVtIHRvIHJlcHJlc2VudCB0aGluZ3MgaW4geW91ciBhcHBsaWNhdGlvbiBpcyBuZWNlc3NhcnkgdG8gY3JlYXRlIGxhcmdlIGFuZCBjb21wbGV4IGFwcGxpY2F0aW9ucyBpbiBKYXZhU2NyaXB0LiBBbmQgd2l0aG91dCB0aGVtLCBjcmVhdGluZyBjb21wbGV4IGFwcGxpY2F0aW9ucyAoc3VjaCBhcyBHb29nbGUgTWFwcykgd291bGRu4oCZdCBiZSBwb3NzaWJsZSBpbiBKYXZhU2NyaXB0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgd291bGQgc2F5IHRoYXQgdGhlIHZhc3QgbWFqb3JpdHkgb2Ygd2ViIGRldmVsb3BlcnMgcHJvYmFibHkgaGF2ZSBuZXZlciBidWlsdCBhIEphdmFTY3JpcHQgb2JqZWN0IGFuZCBqdXN0IHRyZWF0IHRoZSBsYW5ndWFnZSBhcyBldmVudC1iaW5kaW5nIGdsdWUgYmV0d2VlbiBidXR0b25zIGFuZCBBSkFYIHJlcXVlc3RzLiBJIHdhcyBpbiB0aGF0IGNhbXAgYXQgYSBwb2ludCBpbiBteSBjYXJlZXIsIGJ1dCBhZnRlciBJIGxlYXJuZWQgaG93IHRvIG1hc3RlciBwcm90b3R5cGVzIGFuZCBjcmVhdGUgb2JqZWN0cyBpbiBKYXZhU2NyaXB0LCBhIHdvcmxkIG9mIHBvc3NpYmlsaXRpZXMgb3BlbmVkIHVwIGZvciBtZS4gSWYgeW91IGZhbGwgaW50byB0aGUgY2F0ZWdvcnkgb2YganVzdCBjcmVhdGluZyBldmVudC1iaW5kaW5nIGdsdWUgY29kZSwgdGhpcyBib29rIGlzIGEgbXVzdC1yZWFkOyBpZiB5b3UganVzdCBuZWVkIGEgcmVmcmVzaGVyLCB0aGlzIGJvb2sgd2lsbCBiZSBhIGdvLXRvIHJlc291cmNlIGZvciB5b3UuIEVpdGhlciB3YXksIHlvdSB3aWxsIG5vdCBiZSBkaXNhcHBvaW50ZWQuIFRydXN0IG1lISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJOaWNrIEJlcmFyZGkiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL25pY2tiZXJhcmRpLmNvbSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigibmlja2JlcmFyZGkuY29tIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly90d2l0dGVyLmNvbS9uYmVyYXJkaSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQG5iZXJhcmRpIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}